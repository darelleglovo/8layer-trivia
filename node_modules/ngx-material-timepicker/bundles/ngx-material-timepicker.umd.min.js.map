{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-period.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-format.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/time-adapter.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-unit.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker-event.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-toggle-icon.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-toggle-button/ngx-material-timepicker-toggle.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-timepicker.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-theme.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/timepicker-time.namespace.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-hours-face/ngx-material-timepicker-hours-face.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-face/ngx-material-timepicker-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-button/ngx-material-timepicker-button.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial/ngx-material-timepicker-dial.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial-control/ngx-material-timepicker-dial-control.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-period/ngx-material-timepicker-period.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/style-sanitizer.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/overlay.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/minutes-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/autofocus.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.module.ts"],"names":["extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","AM","PM","TWELVE","TWENTY_FOUR","moment","_moment","TimeAdapter","formatTime","time","format","timeFormat","TimeFormat","convertTimeToMoment","isTimeAvailable","min","max","granularity","convertedTime","isAfter","isSameOrAfter","isBefore","isSameOrBefore","isBetween","formatHour","currentHour","period","hour","TimePeriod","moment_","DEFAULT_HOUR","angle","DEFAULT_MINUTE","NgxMaterialTimepickerService","hourSubject","BehaviorSubject","minuteSubject","periodSubject","defineProperty","defaultTime","toDate","isValid","getHours","minute","getMinutes","substr","toUpperCase","resetTime","next","asObservable","setDefaultTimeIfAvailable","getFullTime","getValue","Injectable","HOUR","MINUTE","NgxMaterialTimepickerEventService","backdropClickSubject","Subject","keydownEventSubject","dispatchEvent","event","type","Error","ENTER","LEAVE","ESCAPE","NgxMaterialTimepickerComponent","timepickerService","eventService","_this","timeUnit","TimeUnit","activeTimeUnit","isOpened","isEsc","timeSet","EventEmitter","closed","subscriptions","push","merge","backdropClick","keydownEvent","pipe","filter","e","keyCode","subscribe","close","_minutesGap","gap","Math","floor","setDefaultTime","timepickerInput","disabled","ngOnInit","selectedHour","selectedMinute","selectedPeriod","registerInput","input","onHourChange","onMinuteChange","changePeriod","changeTimeUnit","unit","setTime","open","animationState","AnimationState","animationDone","phaseName","toState","onKeydown","stopPropagation","ngOnDestroy","forEach","subscription","unsubscribe","Component","args","selector","template","animations","trigger","transition","style","transform","animate","opacity","providers","Input","Output","ViewChild","HostListener","NgxMaterialTimepickerToggleIconDirective","Directive","NgxMaterialTimepickerToggleComponent","_disabled","undefined","timepicker","value","ContentChild","VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","TimepickerDirective","multi","elementRef","_format","_value","timepickerSubscriptions","onTouched","onChange","_min","_max","updateInputValue","console","warn","picker","registerTimepicker","_timepicker","onInput","ngOnChanges","changes","currentValue","onClick","disableClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","nativeElement","host","[disabled]","(input)","(blur)","ElementRef","NgxMaterialTimepickerThemeDirective","element","ngAfterViewInit","theme","setTheme","val","prop","setProperty","replace","toLowerCase","TimepickerTime","fill","map","v","disableHours","hours","config","currentTime","minutes","disableMinutes","hour_1","NgxMaterialTimepickerHoursFace","hourChange","hourSelected","hoursList","NgxMaterialTimepicker24HoursFaceComponent","_super","tslib_1.__extends","ngAfterContentInit","minTime","maxTime","NgxMaterialTimepicker12HoursFaceComponent","NgxMaterialTimepickerMinutesFaceComponent","minutesList","minuteChange","minutesGap","CLOCK_HAND_STYLES","height","top","NgxMaterialTimepickerFaceComponent","innerClockFaceSize","timeChange","timeSelected","setClockHandPosition","addTouchEvents","faceTimeChanges","selectedTimeChanges","selectedTime","faceTime","find","setTimeout","selectAvailableTime","trackByTime","_","onMousedown","preventDefault","isStarted","selectTime","MouseEvent","x0","y0","x","y","currentAngle","clockFaceCords","clockFace","getBoundingClientRect","centerX","left","width","centerY","arctangent","atan","abs","clientX","clientY","PI","circleAngle","isInnerClockChosen","isInnerClockFace","angleStep","roundedAngle","roundAngle","onMouseup","isHourSelected","isClockFaceDisabled","isMinuteSelected","removeTouchEvents","touchStartHandler","bind","touchEndHandler","addEventListener","removeEventListener","decreaseClockHand","increaseClockHand","clockHand","every","availableTime","sqrt","pow","step","round","NgxMaterialTimepickerButtonComponent","NgxMaterialTimepickerDialComponent","periodChanged","timeUnitChanged","hourChanged","minuteChanged","changeHour","changeMinute","changeDetection","ChangeDetectionStrategy","OnPush","TimeFormatterPipe","moment.utc","Pipe","name","NgxMaterialTimepickerDialControlComponent","timeChanged","timeList","isEditable","firstChange","saveTimeAndChangeTimeUnit","previousTime","updateTime","onKeyDown","char","String","fromCharCode","isInputAllowed","nextTime","test","isTimeUnavailable","isTimeDisabledToChange","changeTimeByArrow","some","ctrlKey","metaKey","NgxMaterialTimepickerPeriodComponent","timePeriod","isPeriodAvailable","isSwitchPeriodAvailable","getDisabledTimeByPeriod","sequence","StyleSanitizerPipe","domSanitizer","bypassSecurityTrustStyle","DomSanitizer","OverlayDirective","MinutesFormatterPipe","AutofocusDirective","document","activeElement","isFocusActive","focus","Optional","Inject","DOCUMENT","NgxMaterialTimepickerModule","forRoot","ngModule","NgModule","imports","CommonModule","FormsModule","exports","declarations"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum TimePeriod {\r\n    AM = 'AM',\r\n    PM = 'PM'\r\n}\r\n","export enum TimeFormat {\r\n    TWELVE = 'hh:mm a',\r\n    TWENTY_FOUR = 'HH:mm'\r\n}\r\n","import * as _moment from 'moment';\r\nimport {Moment, unitOfTime} from 'moment';\r\nimport {TimeFormat} from '../models/time-format.enum';\r\nimport {TimePeriod} from '../models/time-period.enum';\r\n\r\nconst moment = _moment;\r\n\r\nexport class TimeAdapter {\r\n\r\n    static formatTime(time: string, format = 12): string {\r\n        const timeFormat = format === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;\r\n        return moment(time, TimeFormat.TWELVE).format(timeFormat);\r\n    }\r\n\r\n    static convertTimeToMoment(time: string): Moment {\r\n        return moment(time, TimeFormat.TWELVE);\r\n    }\r\n\r\n    static isTimeAvailable(time: string, min?: Moment, max?: Moment, granularity?: unitOfTime.StartOf): boolean {\r\n        if (!time) {\r\n            return;\r\n        }\r\n        const convertedTime = this.convertTimeToMoment(time);\r\n        const isAfter = (min && !max)\r\n            && convertedTime.isSameOrAfter(min, granularity);\r\n        const isBefore = (max && !min)\r\n            && convertedTime.isSameOrBefore(max, granularity);\r\n        const isBetween = (min && max)\r\n            && convertedTime.isBetween(min, max, granularity, '[]');\r\n        const isAvailable = !min && !max;\r\n\r\n        return isAfter || isBefore || isBetween || isAvailable;\r\n    }\r\n\r\n    /***\r\n     *  Format hour according to time format (12 or 24)\r\n     */\r\n    static formatHour(currentHour: number, format: number, period: TimePeriod): number {\r\n        if (format === 24) {\r\n            return currentHour;\r\n        }\r\n        let hour = period === TimePeriod.AM ? currentHour : currentHour + 12;\r\n\r\n        if (period === TimePeriod.AM && hour === 12) {\r\n            return 0;\r\n        } else if (period === TimePeriod.PM && hour === 24) {\r\n            return 12;\r\n        }\r\n        return hour;\r\n    }\r\n\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {ClockFaceTime} from '../models/clock-face-time.interface';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport {TimePeriod} from '../models/time-period.enum';\r\nimport * as moment_ from 'moment';\r\nimport {TimeFormat} from '../models/time-format.enum';\r\nimport {TimeAdapter} from './time-adapter';\r\nimport {Moment} from 'moment';\r\n\r\nconst moment = moment_;\r\n\r\nconst DEFAULT_HOUR: ClockFaceTime = {\r\n    time: 12,\r\n    angle: 360\r\n};\r\nconst DEFAULT_MINUTE: ClockFaceTime = {\r\n    time: 0,\r\n    angle: 360\r\n};\r\n\r\n@Injectable()\r\nexport class NgxMaterialTimepickerService {\r\n\r\n    private hourSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_HOUR);\r\n    private minuteSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_MINUTE);\r\n    private periodSubject = new BehaviorSubject<TimePeriod>(TimePeriod.AM);\r\n\r\n    private set defaultTime(time: string) {\r\n        const defaultTime = moment(time, TimeFormat.TWENTY_FOUR).toDate();\r\n\r\n        if (moment(defaultTime).isValid()) {\r\n            this.hour = {...DEFAULT_HOUR, time: defaultTime.getHours()};\r\n            this.minute = {...DEFAULT_MINUTE, time: defaultTime.getMinutes()};\r\n            this.period = <TimePeriod>time.substr(time.length - 2).toUpperCase();\r\n        } else {\r\n            this.resetTime();\r\n        }\r\n    }\r\n\r\n    set hour(hour: ClockFaceTime) {\r\n        this.hourSubject.next(hour);\r\n    }\r\n\r\n    get selectedHour(): Observable<ClockFaceTime> {\r\n        return this.hourSubject.asObservable();\r\n    }\r\n\r\n    set minute(minute: ClockFaceTime) {\r\n        this.minuteSubject.next(minute);\r\n    }\r\n\r\n    get selectedMinute(): Observable<ClockFaceTime> {\r\n        return this.minuteSubject.asObservable();\r\n    }\r\n\r\n    set period(period: TimePeriod) {\r\n        this.periodSubject.next(period);\r\n    }\r\n\r\n    get selectedPeriod(): Observable<TimePeriod> {\r\n        return this.periodSubject.asObservable();\r\n    }\r\n\r\n\r\n    setDefaultTimeIfAvailable(time: string, min: Moment, max: Moment, format: number) {\r\n        if (TimeAdapter.isTimeAvailable(time, min, max, 'minutes')) {\r\n            this.defaultTime = TimeAdapter.formatTime(time, format);\r\n        }\r\n    }\r\n\r\n    getFullTime(format: number): string {\r\n        const hour = this.hourSubject.getValue().time;\r\n        const minute = this.minuteSubject.getValue().time;\r\n        const period = format === 12 ? this.periodSubject.getValue() : '';\r\n\r\n        return TimeAdapter.formatTime(`${hour}:${minute} ${period}`, format);\r\n    }\r\n\r\n    private resetTime(): void {\r\n        this.hour = {...DEFAULT_HOUR};\r\n        this.minute = {...DEFAULT_MINUTE};\r\n        this.period = TimePeriod.AM;\r\n    }\r\n}\r\n","export enum TimeUnit {\r\n    HOUR,\r\n    MINUTE\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Observable, Subject} from 'rxjs';\r\n\r\n@Injectable()\r\nexport class NgxMaterialTimepickerEventService {\r\n\r\n    private backdropClickSubject: Subject<MouseEvent> = new Subject();\r\n    private keydownEventSubject: Subject<KeyboardEvent> = new Subject();\r\n\r\n    get backdropClick(): Observable<MouseEvent> {\r\n        return this.backdropClickSubject.asObservable();\r\n    }\r\n\r\n    get keydownEvent(): Observable<KeyboardEvent> {\r\n        return this.keydownEventSubject.asObservable();\r\n    }\r\n\r\n    dispatchEvent(event: KeyboardEvent | MouseEvent): void {\r\n        switch (event.type) {\r\n            case 'click':\r\n                this.backdropClickSubject.next(<MouseEvent>event);\r\n                break;\r\n            case 'keydown':\r\n                this.keydownEventSubject.next(<KeyboardEvent>event);\r\n                break;\r\n            default:\r\n                throw new Error('no such event type');\r\n        }\r\n    }\r\n\r\n}\r\n","import {\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    Input,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output,\r\n    TemplateRef,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport {ClockFaceTime} from './models/clock-face-time.interface';\r\nimport {TimePeriod} from './models/time-period.enum';\r\nimport {merge, Subscription} from 'rxjs';\r\nimport {NgxMaterialTimepickerService} from './services/ngx-material-timepicker.service';\r\nimport {TimeUnit} from './models/time-unit.enum';\r\nimport {animate, AnimationEvent, style, transition, trigger} from '@angular/animations';\r\nimport {NgxMaterialTimepickerEventService} from './services/ngx-material-timepicker-event.service';\r\nimport {filter} from 'rxjs/operators';\r\nimport {TimepickerDirective} from './directives/ngx-timepicker.directive';\r\nimport {Moment} from 'moment';\r\n\r\nexport enum AnimationState {\r\n    ENTER = 'enter',\r\n    LEAVE = 'leave'\r\n}\r\n\r\n\r\n\r\nconst ESCAPE = 27;\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker',\r\n    templateUrl: './ngx-material-timepicker.component.html',\r\n    styleUrls: ['./ngx-material-timepicker.component.scss'],\r\n    animations: [\r\n        trigger('timepicker', [\r\n            transition(`* => ${AnimationState.ENTER}`, [\r\n                style({transform: 'translateY(-30%)'}),\r\n                animate('0.2s ease-out', style({transform: 'translateY(0)'}))\r\n            ]),\r\n            transition(`${AnimationState.ENTER} => ${AnimationState.LEAVE}`, [\r\n                style({transform: 'translateY(0)', opacity: 1}),\r\n                animate('0.2s ease-out', style({transform: 'translateY(-30%)', opacity: 0}))\r\n            ])\r\n        ])\r\n    ],\r\n    providers: [NgxMaterialTimepickerService]\r\n})\r\nexport class NgxMaterialTimepickerComponent implements OnInit, OnDestroy {\r\n\r\n    selectedHour: ClockFaceTime;\r\n    selectedMinute: ClockFaceTime;\r\n    selectedPeriod: TimePeriod;\r\n\r\n    timeUnit = TimeUnit;\r\n    activeTimeUnit = TimeUnit.HOUR;\r\n\r\n    isOpened = false;\r\n    animationState: AnimationState;\r\n\r\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\r\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\r\n    @Input('ESC') isEsc = true;\r\n    @Input() enableKeyboardInput: boolean;\r\n\r\n    @Input()\r\n    set minutesGap(gap: number) {\r\n        gap = Math.floor(gap);\r\n        this._minutesGap = gap <= 59 ? gap : 1;\r\n    }\r\n\r\n    get minutesGap(): number {\r\n        return this._minutesGap;\r\n    }\r\n\r\n    @Input()\r\n    set defaultTime(time: string) {\r\n        this.setDefaultTime(time);\r\n    }\r\n\r\n\r\n    @Output() timeSet = new EventEmitter<string>();\r\n    @Output() closed = new EventEmitter<null>();\r\n\r\n    @ViewChild('timepickerww') timepickerComponent: ElementRef;\r\n\r\n    private _minutesGap: number;\r\n    private timepickerInput: TimepickerDirective;\r\n    private subscriptions: Subscription[] = [];\r\n\r\n    constructor(private timepickerService: NgxMaterialTimepickerService,\r\n                private eventService: NgxMaterialTimepickerEventService) {\r\n\r\n        this.subscriptions.push(merge(this.eventService.backdropClick,\r\n            this.eventService.keydownEvent.pipe(filter(e => e.keyCode === ESCAPE && this.isEsc)))\r\n            .subscribe(() => this.close()));\r\n\r\n    }\r\n\r\n    get minTime(): string | Moment {\r\n        return this.timepickerInput && this.timepickerInput.min;\r\n    }\r\n\r\n    get maxTime(): string | Moment {\r\n        return this.timepickerInput && this.timepickerInput.max;\r\n    }\r\n\r\n    get disabled(): boolean {\r\n        return this.timepickerInput && this.timepickerInput.disabled;\r\n    }\r\n\r\n    get format(): number {\r\n        return this.timepickerInput && this.timepickerInput.format;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.subscriptions.push(this.timepickerService.selectedHour\r\n            .subscribe(hour => this.selectedHour = hour));\r\n\r\n        this.subscriptions.push(this.timepickerService.selectedMinute\r\n            .subscribe(minute => this.selectedMinute = minute));\r\n\r\n        this.subscriptions.push(this.timepickerService.selectedPeriod\r\n            .subscribe(period => this.selectedPeriod = period));\r\n    }\r\n\r\n    /***\r\n     * Register an input with this timepicker.\r\n     * input - The timepicker input to register with this timepicker\r\n     */\r\n    registerInput(input: TimepickerDirective): void {\r\n        if (this.timepickerInput) {\r\n            throw Error('A Timepicker can only be associated with a single input.');\r\n        }\r\n        this.timepickerInput = input;\r\n    }\r\n\r\n    onHourChange(hour: ClockFaceTime): void {\r\n        this.timepickerService.hour = hour;\r\n    }\r\n\r\n    onMinuteChange(minute: ClockFaceTime): void {\r\n        this.timepickerService.minute = minute;\r\n    }\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.timepickerService.period = period;\r\n    }\r\n\r\n    changeTimeUnit(unit: TimeUnit) {\r\n        this.activeTimeUnit = unit;\r\n    }\r\n\r\n    setTime() {\r\n        this.timeSet.next(this.timepickerService.getFullTime(this.format));\r\n        this.close();\r\n    }\r\n\r\n    setDefaultTime(time: string): void {\r\n        this.timepickerService.setDefaultTimeIfAvailable(time, this.minTime as Moment, this.maxTime as Moment, this.format);\r\n    }\r\n\r\n    open() {\r\n        this.isOpened = true;\r\n        this.animationState = AnimationState.ENTER;\r\n    }\r\n\r\n    close() {\r\n        this.animationState = AnimationState.LEAVE;\r\n    }\r\n\r\n    animationDone(event: AnimationEvent): void {\r\n        if (event.phaseName === 'done' && event.toState === AnimationState.LEAVE) {\r\n            this.isOpened = false;\r\n            this.activeTimeUnit = TimeUnit.HOUR;\r\n            this.closed.next();\r\n        }\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    onKeydown(e: KeyboardEvent) {\r\n        this.eventService.dispatchEvent(e);\r\n        e.stopPropagation();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n    }\r\n}\r\n","import {Directive} from '@angular/core';\r\n\r\n/* To override a default toggle icon */\r\n@Directive({selector: '[ngxMaterialTimepickerToggleIcon]'})\r\n\r\nexport class NgxMaterialTimepickerToggleIconDirective {\r\n}\r\n","import {Component, ContentChild, Input} from '@angular/core';\r\nimport {NgxMaterialTimepickerToggleIconDirective} from '../../directives/ngx-material-timepicker-toggle-icon.directive';\r\nimport {NgxMaterialTimepickerComponent} from '../../ngx-material-timepicker.component';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-toggle',\r\n    templateUrl: 'ngx-material-timepicker-toggle.component.html',\r\n    styleUrls: ['ngx-material-timepicker-toggle.component.scss']\r\n})\r\n\r\nexport class NgxMaterialTimepickerToggleComponent {\r\n\r\n    @Input('for') timepicker: NgxMaterialTimepickerComponent;\r\n\r\n    @Input()\r\n    get disabled(): boolean {\r\n        return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\r\n    }\r\n\r\n    set disabled(value: boolean) {\r\n        this._disabled = value;\r\n    }\r\n\r\n    private _disabled: boolean;\r\n\r\n    @ContentChild(NgxMaterialTimepickerToggleIconDirective) customIcon: NgxMaterialTimepickerToggleIconDirective;\r\n\r\n    open(event): void {\r\n        if (this.timepicker) {\r\n            this.timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n}\r\n","import {Directive, ElementRef, forwardRef, HostListener, Input, OnChanges, OnDestroy, SimpleChanges} from '@angular/core';\r\nimport {NgxMaterialTimepickerComponent} from '../ngx-material-timepicker.component';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {Subscription} from 'rxjs';\r\nimport {Moment} from 'moment';\r\nimport {TimeAdapter} from '../services/time-adapter';\r\n\r\nconst VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => TimepickerDirective),\r\n    multi: true\r\n};\r\n\r\n@Directive({\r\n    selector: '[ngxTimepicker]',\r\n    providers: [VALUE_ACCESSOR],\r\n    host: {\r\n        '[disabled]': 'disabled',\r\n        '(input)': 'onInput($event.target.value)',\r\n        '(blur)': 'onTouched()',\r\n    },\r\n})\r\nexport class TimepickerDirective implements ControlValueAccessor, OnDestroy, OnChanges {\r\n\r\n    @Input()\r\n    set format(value: number) {\r\n        this._format = value === 24 ? 24 : 12;\r\n    }\r\n\r\n    get format(): number {\r\n        return this._format;\r\n    }\r\n\r\n    private _format = 12;\r\n\r\n    @Input()\r\n    set min(value: string | Moment) {\r\n        if (typeof value === 'string') {\r\n            this._min = TimeAdapter.convertTimeToMoment(value);\r\n            return;\r\n        }\r\n        this._min = value;\r\n    }\r\n\r\n    get min(): string | Moment {\r\n        return this._min;\r\n    }\r\n\r\n    private _min: string | Moment;\r\n\r\n    @Input()\r\n    set max(value: string | Moment) {\r\n        if (typeof value === 'string') {\r\n            this._max = TimeAdapter.convertTimeToMoment(value);\r\n            return;\r\n        }\r\n        this._max = value;\r\n    }\r\n\r\n    get max(): string | Moment {\r\n        return this._max;\r\n    }\r\n\r\n    private _max: string | Moment;\r\n\r\n    @Input()\r\n    set value(value: string) {\r\n        if (!value) {\r\n            this._value = '';\r\n            this.updateInputValue();\r\n            return;\r\n        }\r\n        const time = TimeAdapter.formatTime(value, this._format);\r\n        if (TimeAdapter.isTimeAvailable(time, <Moment>this._min, <Moment>this._max, 'minutes')) {\r\n            this._value = time;\r\n            this.updateInputValue();\r\n            return;\r\n        }\r\n        console.warn('Selected time doesn\\'t match min or max value');\r\n    }\r\n\r\n    get value(): string {\r\n        return this._value;\r\n    }\r\n\r\n    private _value = '';\r\n\r\n    @Input('ngxTimepicker')\r\n    set timepicker(picker: NgxMaterialTimepickerComponent) {\r\n        this.registerTimepicker(picker);\r\n    }\r\n    private _timepicker: NgxMaterialTimepickerComponent;\r\n\r\n    @Input() disabled: boolean;\r\n    @Input() disableClick: boolean;\r\n    private timepickerSubscriptions: Subscription[] = [];\r\n    onTouched = () => {};\r\n    private onChange: (value: any) => void = () => {};\r\n\r\n    constructor(private elementRef: ElementRef) {\r\n    }\r\n\r\n    private set defaultTime(time: string) {\r\n        this._timepicker.setDefaultTime(time);\r\n    }\r\n\r\n    onInput(value: string) {\r\n        this.value = value;\r\n        this.onChange(value);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['value'] && changes['value'].currentValue) {\r\n            this.defaultTime = changes['value'].currentValue;\r\n        }\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(event) {\r\n        if (!this.disableClick) {\r\n            this._timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    writeValue(value: string): void {\r\n        this.value = value;\r\n        this.defaultTime = value;\r\n    }\r\n\r\n    registerOnChange(fn: (value: any) => void): void {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: () => void): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.timepickerSubscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n    private registerTimepicker(picker: NgxMaterialTimepickerComponent): void {\r\n        if (picker) {\r\n            this._timepicker = picker;\r\n            this._timepicker.registerInput(this);\r\n            this.timepickerSubscriptions.push(this._timepicker.timeSet.subscribe((time: string) => {\r\n                this.value = time;\r\n                this.onChange(this._value);\r\n                this.onTouched();\r\n            }));\r\n            this.timepickerSubscriptions.push(\r\n                this._timepicker.closed.subscribe(() => this.defaultTime = this._value));\r\n        } else {\r\n            throw new Error('NgxMaterialTimepickerComponent is not defined.' +\r\n                ' Please make sure you passed the timepicker to ngxTimepicker directive');\r\n        }\r\n    }\r\n\r\n    private updateInputValue(): void {\r\n        this.elementRef.nativeElement.value = this.value;\r\n    }\r\n\r\n}\r\n\r\n","import {AfterViewInit, Directive, ElementRef, Input} from '@angular/core';\r\nimport {NgxMaterialTimepickerTheme} from '../models/ngx-material-timepicker-theme.interface';\r\n\r\n@Directive({selector: '[ngxMaterialTimepickerTheme]'})\r\nexport class NgxMaterialTimepickerThemeDirective implements AfterViewInit {\r\n\r\n    @Input('ngxMaterialTimepickerTheme') theme: NgxMaterialTimepickerTheme;\r\n\r\n    private element: HTMLElement;\r\n\r\n    constructor(elementRef: ElementRef) {\r\n        this.element = elementRef.nativeElement;\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.theme) {\r\n            this.setTheme(this.theme);\r\n        }\r\n    }\r\n\r\n    private setTheme(theme): void {\r\n        for (let val in theme) {\r\n            if (theme.hasOwnProperty(val)) {\r\n                if (typeof theme[val] === 'string') {\r\n                    for (let prop in theme) {\r\n                        if (theme.hasOwnProperty(prop)) {\r\n                            this.element.style.setProperty(`--${camelCaseToDash(prop)}`, theme[prop]);\r\n                        }\r\n                    }\r\n                    return\r\n                }\r\n                this.setTheme(theme[val])\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n\r\nfunction camelCaseToDash(myStr) {\r\n    return myStr.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\r\n}\r\n","import {ClockFaceTime} from './models/clock-face-time.interface';\r\nimport * as _moment from 'moment';\r\nimport {TimeAdapter} from './services/time-adapter';\r\nimport {TimeFormat} from './models/time-format.enum';\r\nimport {DisabledTimeConfig} from './models/disabled-time-config.interface';\r\n\r\nconst moment = _moment;\r\n\r\nexport namespace TimepickerTime {\r\n\r\n    export function getHours(format: number): ClockFaceTime[] {\r\n        return Array(format).fill(1).map((v, i) => {\r\n            const angleStep = 30;\r\n            const time = v + i;\r\n            const angle = angleStep * time;\r\n            return {time: time === 24 ? 0 : time, angle};\r\n        });\r\n    }\r\n\r\n    export function disableHours(hours: ClockFaceTime[], config: DisabledTimeConfig): ClockFaceTime[] {\r\n        if (config.min || config.max) {\r\n\r\n            return hours.map(value => {\r\n                const hour = config.format === 24 ? value.time : TimeAdapter.formatHour(+value.time, config.format, config.period);\r\n                const currentTime = moment().hour(+hour).format(TimeFormat.TWELVE);\r\n\r\n                return {\r\n                    ...value,\r\n                    disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'hours')\r\n                };\r\n            });\r\n        }\r\n        return hours;\r\n    }\r\n\r\n    export function getMinutes(gap = 1): ClockFaceTime[] {\r\n        const minutesCount = 60;\r\n        const angleStep = 360 / minutesCount;\r\n        const minutes = [];\r\n\r\n        for (let i = 0; i < minutesCount; i++) {\r\n            const angle = angleStep * i;\r\n            if (i % gap === 0) {\r\n                minutes.push({time: i, angle: angle !== 0 ? angle : 360});\r\n            }\r\n        }\r\n        return minutes;\r\n    }\r\n\r\n    export function disableMinutes(minutes: ClockFaceTime[], selectedHour: number, config: DisabledTimeConfig) {\r\n        if (config.min || config.max) {\r\n\r\n            const hour = TimeAdapter.formatHour(selectedHour, config.format, config.period);\r\n\r\n            return minutes.map(value => {\r\n                const currentTime = moment().hour(hour).minute(+value.time).format(TimeFormat.TWELVE);\r\n\r\n                return {\r\n                    ...value,\r\n                    disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'minutes')\r\n                };\r\n            });\r\n        }\r\n        return minutes;\r\n    }\r\n}\r\n","import {EventEmitter, Input, Output} from '@angular/core';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {Moment} from 'moment';\r\nimport {TimepickerTime} from '../../timepicker-time.namespace';\r\n\r\n\r\nexport class NgxMaterialTimepickerHoursFace {\r\n\r\n    @Input() selectedHour: ClockFaceTime;\r\n    @Input() minTime: Moment;\r\n    @Input() maxTime: Moment;\r\n    @Input() format: number;\r\n\r\n    @Output() hourChange = new EventEmitter<ClockFaceTime>();\r\n    @Output() hourSelected = new EventEmitter<null>();\r\n\r\n    hoursList: ClockFaceTime[] = [];\r\n\r\n    protected constructor(format: number) {\r\n        this.hoursList = TimepickerTime.getHours(format);\r\n    }\r\n}\r\n","import {AfterContentInit, Component} from '@angular/core';\r\nimport {NgxMaterialTimepickerHoursFace} from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\r\nimport {TimepickerTime} from '../../timepicker-time.namespace';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-24-hours-face',\r\n    templateUrl: 'ngx-material-timepicker-24-hours-face.component.html'\r\n})\r\n\r\nexport class NgxMaterialTimepicker24HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements AfterContentInit {\r\n\r\n    constructor() {\r\n        super(24);\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.hoursList = TimepickerTime.disableHours(this.hoursList, {\r\n            min: this.minTime,\r\n            max: this.maxTime,\r\n            format: this.format\r\n        });\r\n    }\r\n}\r\n","import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\r\nimport {NgxMaterialTimepickerHoursFace} from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\r\nimport {TimePeriod} from '../../models/time-period.enum';\r\nimport {TimepickerTime} from '../../timepicker-time.namespace';\r\n\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-12-hours-face',\r\n    templateUrl: 'ngx-material-timepicker-12-hours-face.component.html'\r\n})\r\n\r\nexport class NgxMaterialTimepicker12HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements OnChanges {\r\n\r\n    @Input() period: TimePeriod;\r\n\r\n    constructor() {\r\n        super(12);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['period'] && changes['period'].currentValue) {\r\n            this.hoursList = TimepickerTime.disableHours(this.hoursList, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n}\r\n","import {Component, EventEmitter, Input, OnChanges, Output, SimpleChanges} from '@angular/core';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {TimeUnit} from '../../models/time-unit.enum';\r\nimport {TimePeriod} from '../../models/time-period.enum';\r\nimport {Moment} from 'moment';\r\nimport {TimepickerTime} from '../../timepicker-time.namespace';\r\n\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-minutes-face',\r\n    templateUrl: './ngx-material-timepicker-minutes-face.component.html'\r\n})\r\nexport class NgxMaterialTimepickerMinutesFaceComponent implements OnChanges {\r\n\r\n    minutesList: ClockFaceTime[] = [];\r\n    timeUnit = TimeUnit;\r\n\r\n    @Input() selectedMinute: ClockFaceTime;\r\n    @Input() selectedHour: number;\r\n    @Input() period: TimePeriod;\r\n    @Input() minTime: Moment;\r\n    @Input() maxTime: Moment;\r\n    @Input() format: number;\r\n    @Input() minutesGap: number;\r\n\r\n    @Output() minuteChange = new EventEmitter<ClockFaceTime>();\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['period'] && changes['period'].currentValue) {\r\n            const minutes = TimepickerTime.getMinutes(this.minutesGap);\r\n            this.minutesList = TimepickerTime.disableMinutes(minutes, this.selectedHour, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n","import {\r\n    AfterViewInit,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    Output,\r\n    SimpleChanges,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {TimeUnit} from '../../models/time-unit.enum';\r\n\r\nconst CLOCK_HAND_STYLES = {\r\n    small: {\r\n        height: '75px',\r\n        top: 'calc(50% - 75px)'\r\n    },\r\n    large: {\r\n        height: '103px',\r\n        top: 'calc(50% - 103px)'\r\n    }\r\n};\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-face',\r\n    templateUrl: './ngx-material-timepicker-face.component.html',\r\n    styleUrls: ['./ngx-material-timepicker-face.component.scss']\r\n})\r\nexport class NgxMaterialTimepickerFaceComponent implements AfterViewInit, OnChanges, OnDestroy {\r\n\r\n    timeUnit = TimeUnit;\r\n\r\n    isClockFaceDisabled: boolean;\r\n    innerClockFaceSize = 85;\r\n\r\n    @Input() faceTime: ClockFaceTime[];\r\n    @Input() selectedTime: ClockFaceTime;\r\n    @Input() unit: TimeUnit;\r\n    @Input() format: number;\r\n    @Input() minutesGap: number;\r\n\r\n    @Output() timeChange = new EventEmitter<ClockFaceTime>();\r\n    @Output() timeSelected = new EventEmitter<null>();\r\n\r\n    @ViewChild('clockFace') clockFace: ElementRef;\r\n    @ViewChild('clockHand') clockHand: ElementRef;\r\n\r\n    private isStarted: boolean;\r\n    private touchStartHandler: () => any;\r\n    private touchEndHandler: () => any;\r\n\r\n    ngAfterViewInit() {\r\n        this.setClockHandPosition();\r\n        this.addTouchEvents();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        const faceTimeChanges = changes['faceTime'];\r\n        const selectedTimeChanges = changes['selectedTime'];\r\n\r\n        if ((faceTimeChanges && faceTimeChanges.currentValue)\r\n            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {\r\n            /* Set time according to passed an input value */\r\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\r\n        }\r\n        if (selectedTimeChanges && selectedTimeChanges.currentValue) {\r\n            this.setClockHandPosition();\r\n        }\r\n        if (faceTimeChanges && faceTimeChanges.currentValue) {\r\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\r\n            setTimeout(() => this.selectAvailableTime());\r\n        }\r\n    }\r\n\r\n\r\n    trackByTime(_, time: ClockFaceTime): string | number {\r\n        return time.time;\r\n    }\r\n\r\n    @HostListener('mousedown', ['$event'])\r\n    onMousedown(e: MouseEvent | TouchEvent) {\r\n        e.preventDefault();\r\n        this.isStarted = true;\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    @HostListener('touchmove', ['$event.changedTouches[0]'])\r\n    @HostListener('touchend', ['$event.changedTouches[0]'])\r\n    @HostListener('mousemove', ['$event'])\r\n    selectTime(e: MouseEvent | Touch): void {\r\n\r\n        if (!this.isStarted && (e instanceof MouseEvent && e.type !== 'click')) {\r\n            return;\r\n        }\r\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\r\n\r\n        /* Get x0 and y0 of the circle */\r\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\r\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\r\n        /* Counting the arctangent and convert it to from radian to deg */\r\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\r\n        /* Get angle according to quadrant */\r\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\r\n        /* Check if selected time from the inner clock face (24 hours format only) */\r\n        const isInnerClockChosen = this.format && this.isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\r\n        /* Round angle according to angle step */\r\n        const angleStep = this.unit === TimeUnit.MINUTE ? 6 : 30;\r\n        const roundedAngle = isInnerClockChosen\r\n            ? roundAngle(circleAngle, angleStep) + 360\r\n            : roundAngle(circleAngle, angleStep);\r\n\r\n        const selectedTime = this.faceTime.find(val => val.angle === roundedAngle);\r\n\r\n        if (selectedTime && !selectedTime.disabled) {\r\n            this.timeChange.next(selectedTime);\r\n\r\n            /* To let know whether user ended interaction with clock face */\r\n            if (!this.isStarted) {\r\n                this.timeSelected.next();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    @HostListener('mouseup', ['$event'])\r\n    onMouseup(e: MouseEvent | TouchEvent) {\r\n        e.preventDefault();\r\n        this.isStarted = false;\r\n    }\r\n\r\n    isHourSelected(hour: number): boolean {\r\n        return (hour === this.selectedTime.time) && !this.isClockFaceDisabled;\r\n    }\r\n\r\n    isMinuteSelected(minute: number): boolean {\r\n        return ((this.selectedTime.time === minute) && (minute % (this.minutesGap || 5) === 0)) && !this.isClockFaceDisabled;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.removeTouchEvents();\r\n    }\r\n\r\n    private addTouchEvents(): void {\r\n        this.touchStartHandler = this.onMousedown.bind(this);\r\n        this.touchEndHandler = this.onMouseup.bind(this);\r\n\r\n        this.clockFace.nativeElement.addEventListener('touchstart', this.touchStartHandler);\r\n        this.clockFace.nativeElement.addEventListener('touchend', this.touchEndHandler);\r\n    }\r\n\r\n    private removeTouchEvents(): void {\r\n        this.clockFace.nativeElement.removeEventListener('touchstart', this.touchStartHandler);\r\n        this.clockFace.nativeElement.removeEventListener('touchend', this.touchEndHandler);\r\n    }\r\n\r\n    private setClockHandPosition(): void {\r\n        if (this.format === 24) {\r\n            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\r\n                this.decreaseClockHand();\r\n            } else {\r\n                this.increaseClockHand();\r\n            }\r\n        }\r\n\r\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\r\n    }\r\n\r\n    private selectAvailableTime(): void {\r\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\r\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\r\n\r\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\r\n            const availableTime = this.faceTime.find(time => !time.disabled);\r\n\r\n            this.timeChange.next(availableTime);\r\n        }\r\n    }\r\n\r\n    private isInnerClockFace(x0: number, y0: number, x: number, y: number): boolean {\r\n        /* Detect whether time from the inner clock face or not (24 format only) */\r\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\r\n    }\r\n\r\n    private decreaseClockHand(): void {\r\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\r\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\r\n    }\r\n\r\n    private increaseClockHand(): void {\r\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\r\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\r\n    }\r\n}\r\n\r\nfunction roundAngle(angle: number, step: number): number {\r\n    return Math.round(angle / step) * step;\r\n}\r\n\r\nfunction countAngleByCords(x0: number, y0: number, x: number, y: number, currentAngle: number): number {\r\n    if (y > y0 && x >= x0) {// II quarter\r\n        return 180 - currentAngle;\r\n    } else if (y > y0 && x < x0) {// III quarter\r\n        return 180 + currentAngle;\r\n    } else if (y < y0 && x < x0) {// IV quarter\r\n        return 360 - currentAngle;\r\n    } else {// I quarter\r\n        return currentAngle;\r\n    }\r\n}\r\n","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-button',\r\n    templateUrl: './ngx-material-timepicker-button.component.html',\r\n    styleUrls: ['./ngx-material-timepicker-button.component.scss']\r\n})\r\nexport class NgxMaterialTimepickerButtonComponent {\r\n}\r\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges} from '@angular/core';\r\nimport {TimePeriod} from '../../models/time-period.enum';\r\nimport {TimeUnit} from '../../models/time-unit.enum';\r\nimport {TimepickerTime} from '../../timepicker-time.namespace';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {Moment} from 'moment';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-dial',\r\n    templateUrl: 'ngx-material-timepicker-dial.component.html',\r\n    styleUrls: ['ngx-material-timepicker-dial.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMaterialTimepickerDialComponent implements OnChanges {\r\n\r\n    timeUnit = TimeUnit;\r\n\r\n    hours: ClockFaceTime[];\r\n    minutes: ClockFaceTime[];\r\n\r\n    @Input() hour: number | string;\r\n    @Input() minute: number | string;\r\n    @Input() format: number;\r\n    @Input() period: TimePeriod;\r\n    @Input() activeTimeUnit: TimeUnit;\r\n    @Input() minTime: Moment;\r\n    @Input() maxTime: Moment;\r\n    @Input() isEditable: boolean;\r\n    @Input() minutesGap: number;\r\n\r\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\r\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\r\n    @Output() hourChanged = new EventEmitter<ClockFaceTime>();\r\n    @Output() minuteChanged = new EventEmitter<ClockFaceTime>();\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['period'] && changes['period'].currentValue\r\n            || changes['format'] && changes['format'].currentValue) {\r\n            const hours = TimepickerTime.getHours(this.format);\r\n\r\n            this.hours = TimepickerTime.disableHours(hours, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n        if (changes['period'] && changes['period'].currentValue\r\n            || changes['hour'] && changes['hour'].currentValue) {\r\n            const minutes = TimepickerTime.getMinutes(this.minutesGap);\r\n\r\n            this.minutes = TimepickerTime.disableMinutes(minutes, +this.hour, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n\r\n    changeTimeUnit(unit: TimeUnit): void {\r\n        this.timeUnitChanged.next(unit);\r\n    }\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.periodChanged.next(period);\r\n    }\r\n\r\n    changeHour(hour: ClockFaceTime): void {\r\n        this.hourChanged.next(hour);\r\n    }\r\n\r\n    changeMinute(minute: ClockFaceTime): void {\r\n        this.minuteChanged.next(minute);\r\n    }\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\nimport * as moment from 'moment';\r\nimport {TimeUnit} from '../models/time-unit.enum';\r\n\r\n@Pipe({\r\n    name: 'timeFormatter'\r\n})\r\nexport class TimeFormatterPipe implements PipeTransform {\r\n\r\n    transform(time: number, timeUnit: TimeUnit): any {\r\n        if (time === undefined) {\r\n            return time;\r\n        }\r\n        switch (timeUnit) {\r\n            case TimeUnit.HOUR:\r\n                return moment.utc(time * 3600 * 1000).format('HH');\r\n            case TimeUnit.MINUTE:\r\n                return moment.utc(time * 60 * 1000).format('mm');\r\n            default:\r\n                throw new Error('no such time unit');\r\n        }\r\n    }\r\n\r\n}\r\n","import {Component, EventEmitter, Input, OnChanges, Output, SimpleChanges} from '@angular/core';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {TimeUnit} from '../../models/time-unit.enum';\r\nimport {TimeFormatterPipe} from '../../pipes/time-formatter.pipe';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-dial-control',\r\n    templateUrl: 'ngx-material-timepicker-dial-control.component.html',\r\n    styleUrls: ['ngx-material-timepicker-dial-control.component.scss']\r\n})\r\nexport class NgxMaterialTimepickerDialControlComponent implements OnChanges {\r\n\r\n    previousTime: number | string;\r\n\r\n    @Input() timeList: ClockFaceTime[];\r\n    @Input() timeUnit: TimeUnit;\r\n    @Input() time: string;\r\n    @Input() isActive: boolean;\r\n    @Input() isEditable: boolean;\r\n\r\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\r\n    @Output() timeChanged = new EventEmitter<ClockFaceTime>();\r\n\r\n    private get selectedTime(): ClockFaceTime {\r\n        if (!!this.time) {\r\n            return this.timeList.find(t => t.time === +this.time);\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['time'] && (changes['time'].currentValue !== undefined)) {\r\n            if (this.isEditable && !changes['time'].firstChange) {\r\n                return;\r\n            }\r\n            this.time = new TimeFormatterPipe().transform(+changes['time'].currentValue, this.timeUnit)\r\n        }\r\n    }\r\n\r\n    saveTimeAndChangeTimeUnit(event: FocusEvent, unit: TimeUnit): void {\r\n        event.preventDefault();\r\n        this.previousTime = this.time;\r\n        this.timeUnitChanged.next(unit);\r\n    }\r\n\r\n    updateTime(): void {\r\n        const time = this.selectedTime;\r\n        if (time) {\r\n            this.timeChanged.next(time);\r\n            this.previousTime = time.time;\r\n        }\r\n    }\r\n\r\n    formatTime(): void {\r\n        if (this.isEditable) {\r\n            const time = this.time || this.previousTime;\r\n            this.time = new TimeFormatterPipe().transform(+time, this.timeUnit);\r\n        }\r\n    }\r\n\r\n    onKeyDown(e: KeyboardEvent): void {\r\n        const char = String.fromCharCode(e.keyCode);\r\n\r\n\r\n        if ((!isInputAllowed(e)) || isTimeDisabledToChange(this.time, char, this.timeList)) {\r\n            e.preventDefault();\r\n        }\r\n\r\n        if (isInputAllowed(e)) {\r\n            this.changeTimeByArrow(e.keyCode);\r\n        }\r\n    }\r\n\r\n    private changeTimeByArrow(keyCode: number): void {\r\n        const ARROW_UP = 38;\r\n        const ARROW_DOWN = 40;\r\n        let time: string;\r\n\r\n        if (keyCode === ARROW_UP) {\r\n            time = String(+this.time + 1);\r\n        } else if (keyCode === ARROW_DOWN) {\r\n            time = String(+this.time - 1);\r\n        }\r\n\r\n        if (!isTimeUnavailable(time, this.timeList)) {\r\n            this.time = time;\r\n            this.updateTime();\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction isInputAllowed(e: KeyboardEvent): boolean {\r\n    // Allow: backspace, delete, tab, escape, enter\r\n    if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) ||\r\n        // Allow: Ctrl/cmd+A\r\n        (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n        // Allow: Ctrl/cmd+C\r\n        (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n        // Allow: Ctrl/cmd+X\r\n        (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n        // Allow: home, end, left, right, up, down\r\n        (e.keyCode >= 35 && e.keyCode <= 40)) {\r\n\r\n        return true;\r\n    }\r\n    return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105))\r\n}\r\n\r\nfunction isTimeDisabledToChange(currentTime: string, nextTime: string, timeList: ClockFaceTime[]): boolean {\r\n    const isNumber = /\\d/.test(nextTime);\r\n\r\n    if (isNumber) {\r\n        const time = currentTime + nextTime;\r\n        return isTimeUnavailable(time, timeList);\r\n    }\r\n}\r\n\r\nfunction isTimeUnavailable(time: string, timeList: ClockFaceTime[]): boolean {\r\n    const selectedTime = timeList.find(value => value.time === +time);\r\n    return !selectedTime || (selectedTime && selectedTime.disabled);\r\n}\r\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\r\nimport {TimePeriod} from '../../models/time-period.enum';\r\nimport {TimeUnit} from '../../models/time-unit.enum';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {TimepickerTime} from '../../timepicker-time.namespace';\r\nimport {Moment} from 'moment';\r\nimport {animate, sequence, style, transition, trigger} from '@angular/animations';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-period',\r\n    templateUrl: 'ngx-material-timepicker-period.component.html',\r\n    styleUrls: ['ngx-material-timepicker-period.component.scss'],\r\n    animations: [\r\n        trigger('scaleInOut', [\r\n            transition(':enter', [\r\n                style({transform: 'scale(0)'}),\r\n                animate('.2s', style({transform: 'scale(1)'})),\r\n                sequence([\r\n                    animate('3s', style({opacity: 1})),\r\n                    animate('.3s', style({opacity: 0}))\r\n                ])\r\n            ])\r\n        ])\r\n    ]\r\n})\r\nexport class NgxMaterialTimepickerPeriodComponent {\r\n\r\n    timePeriod = TimePeriod;\r\n    isPeriodAvailable = true;\r\n\r\n    @Input() selectedPeriod: TimePeriod;\r\n    @Input() format: number;\r\n    @Input() activeTimeUnit: TimeUnit;\r\n    @Input() hours: ClockFaceTime[];\r\n    @Input() minutes: ClockFaceTime[];\r\n    @Input() minTime: Moment;\r\n    @Input() maxTime: Moment;\r\n    @Input() selectedHour: number | string;\r\n\r\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.isPeriodAvailable = this.isSwitchPeriodAvailable(period);\r\n        if (this.isPeriodAvailable) {\r\n            this.periodChanged.next(period);\r\n        }\r\n    }\r\n\r\n    animationDone(): void {\r\n        this.isPeriodAvailable = true;\r\n    }\r\n\r\n    private isSwitchPeriodAvailable(period: TimePeriod): boolean {\r\n        const time = this.getDisabledTimeByPeriod(period);\r\n        return !time.every(t => t.disabled);\r\n    }\r\n\r\n    private getDisabledTimeByPeriod(period: TimePeriod): ClockFaceTime[] {\r\n        switch (this.activeTimeUnit) {\r\n            case TimeUnit.HOUR:\r\n                return TimepickerTime.disableHours(this.hours, {\r\n                    min: this.minTime,\r\n                    max: this.maxTime,\r\n                    format: this.format,\r\n                    period\r\n                });\r\n            case TimeUnit.MINUTE:\r\n                return TimepickerTime.disableMinutes(this.minutes, +this.selectedHour, {\r\n                    min: this.minTime,\r\n                    max: this.maxTime,\r\n                    format: this.format,\r\n                    period\r\n                });\r\n            default:\r\n                throw new Error('no such TimeUnit');\r\n        }\r\n    }\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\nimport {DomSanitizer} from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n    name: 'styleSanitizer'\r\n})\r\nexport class StyleSanitizerPipe implements PipeTransform {\r\n\r\n    constructor(private domSanitizer: DomSanitizer) {\r\n    }\r\n\r\n    transform(value: string): any {\r\n        if (!value) {\r\n            return value;\r\n        }\r\n        return this.domSanitizer.bypassSecurityTrustStyle(value);\r\n    }\r\n\r\n}\r\n","import {Directive, HostListener} from '@angular/core';\r\nimport {NgxMaterialTimepickerEventService} from '../services/ngx-material-timepicker-event.service';\r\n\r\n@Directive({\r\n    selector: '[overlay]'\r\n})\r\nexport class OverlayDirective {\r\n\r\n    constructor(private eventService: NgxMaterialTimepickerEventService) {\r\n    }\r\n\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(e: MouseEvent) {\r\n        this.eventService.dispatchEvent(e);\r\n        e.preventDefault();\r\n    }\r\n\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'minutesFormatter'\r\n})\r\nexport class MinutesFormatterPipe implements PipeTransform {\r\n\r\n    transform(minute: number, gap = 5): number | string {\r\n        if (!minute) {\r\n            return minute;\r\n        }\r\n\r\n        return minute % gap === 0 ? minute : '';\r\n    }\r\n\r\n}\r\n","import {Directive, ElementRef, Inject, Input, OnChanges, OnDestroy, Optional} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\n\r\n@Directive({\r\n    selector: '[timepickerAutofocus]'\r\n})\r\nexport class AutofocusDirective implements OnChanges, OnDestroy {\r\n\r\n    @Input('timepickerAutofocus') isFocusActive: boolean;\r\n\r\n    private activeElement: HTMLElement;\r\n\r\n    constructor(private element: ElementRef, @Optional() @Inject(DOCUMENT) private document: any) {\r\n        this.activeElement = this.document.activeElement;\r\n    }\r\n\r\n    ngOnChanges() {\r\n        if (this.isFocusActive) {\r\n            // To avoid ExpressionChangedAfterItHasBeenCheckedError;\r\n            setTimeout(() => this.element.nativeElement.focus());\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        // To avoid ExpressionChangedAfterItHasBeenCheckedError;\r\n        setTimeout(() => this.activeElement.focus());\r\n    }\r\n}\r\n","import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgxMaterialTimepickerComponent} from './ngx-material-timepicker.component';\r\nimport {FormsModule} from '@angular/forms';\r\nimport {NgxMaterialTimepickerToggleComponent} from './components/timepicker-toggle-button/ngx-material-timepicker-toggle.component';\r\nimport {TimepickerDirective} from './directives/ngx-timepicker.directive';\r\nimport {NgxMaterialTimepickerToggleIconDirective} from './directives/ngx-material-timepicker-toggle-icon.directive';\r\nimport {NgxMaterialTimepickerThemeDirective} from './directives/ngx-material-timepicker-theme.directive';\r\nimport {NgxMaterialTimepicker24HoursFaceComponent} from './components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component';\r\nimport {NgxMaterialTimepicker12HoursFaceComponent} from './components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component';\r\nimport {NgxMaterialTimepickerMinutesFaceComponent} from './components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component';\r\nimport {NgxMaterialTimepickerFaceComponent} from './components/timepicker-face/ngx-material-timepicker-face.component';\r\nimport {NgxMaterialTimepickerButtonComponent} from './components/timepicker-button/ngx-material-timepicker-button.component';\r\nimport {NgxMaterialTimepickerDialComponent} from './components/timepicker-dial/ngx-material-timepicker-dial.component';\r\nimport {NgxMaterialTimepickerDialControlComponent} from './components/timepicker-dial-control/ngx-material-timepicker-dial-control.component';\r\nimport {NgxMaterialTimepickerPeriodComponent} from './components/timepicker-period/ngx-material-timepicker-period.component';\r\nimport {StyleSanitizerPipe} from './pipes/style-sanitizer.pipe';\r\nimport {TimeFormatterPipe} from './pipes/time-formatter.pipe';\r\nimport {OverlayDirective} from './directives/overlay.directive';\r\nimport {MinutesFormatterPipe} from './pipes/minutes-formatter.pipe';\r\nimport {AutofocusDirective} from './directives/autofocus.directive';\r\nimport {NgxMaterialTimepickerService} from './services/ngx-material-timepicker.service';\r\nimport {NgxMaterialTimepickerEventService} from './services/ngx-material-timepicker-event.service';\r\n\r\n\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule\r\n    ],\r\n    exports: [\r\n        NgxMaterialTimepickerComponent,\r\n        NgxMaterialTimepickerToggleComponent,\r\n        TimepickerDirective,\r\n        NgxMaterialTimepickerToggleIconDirective,\r\n        NgxMaterialTimepickerThemeDirective\r\n    ],\r\n    declarations: [\r\n        NgxMaterialTimepickerComponent,\r\n        NgxMaterialTimepicker24HoursFaceComponent,\r\n        NgxMaterialTimepicker12HoursFaceComponent,\r\n        NgxMaterialTimepickerMinutesFaceComponent,\r\n        NgxMaterialTimepickerFaceComponent,\r\n        NgxMaterialTimepickerToggleComponent,\r\n        NgxMaterialTimepickerButtonComponent,\r\n        NgxMaterialTimepickerDialComponent,\r\n        NgxMaterialTimepickerDialControlComponent,\r\n        NgxMaterialTimepickerPeriodComponent,\r\n        StyleSanitizerPipe,\r\n        TimeFormatterPipe,\r\n        TimepickerDirective,\r\n        OverlayDirective,\r\n        NgxMaterialTimepickerToggleIconDirective,\r\n        AutofocusDirective,\r\n        MinutesFormatterPipe,\r\n        NgxMaterialTimepickerThemeDirective\r\n    ]\r\n})\r\nexport class NgxMaterialTimepickerModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: NgxMaterialTimepickerModule,\r\n            providers: [NgxMaterialTimepickerService, NgxMaterialTimepickerEventService]\r\n        };\r\n    }\r\n}\r\n"]}