/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as _moment from 'moment';
import { TimeFormat } from '../models/time-format.enum';
import { TimePeriod } from '../models/time-period.enum';
/** @type {?} */
const moment = _moment;
export class TimeAdapter {
    /**
     * @param {?} time
     * @param {?=} format
     * @return {?}
     */
    static formatTime(time, format = 12) {
        /** @type {?} */
        const timeFormat = format === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;
        return moment(time, TimeFormat.TWELVE).format(timeFormat);
    }
    /**
     * @param {?} time
     * @return {?}
     */
    static convertTimeToMoment(time) {
        return moment(time, TimeFormat.TWELVE);
    }
    /**
     * @param {?} time
     * @param {?=} min
     * @param {?=} max
     * @param {?=} granularity
     * @return {?}
     */
    static isTimeAvailable(time, min, max, granularity) {
        if (!time) {
            return;
        }
        /** @type {?} */
        const convertedTime = this.convertTimeToMoment(time);
        /** @type {?} */
        const isAfter = (min && !max)
            && convertedTime.isSameOrAfter(min, granularity);
        /** @type {?} */
        const isBefore = (max && !min)
            && convertedTime.isSameOrBefore(max, granularity);
        /** @type {?} */
        const isBetween = (min && max)
            && convertedTime.isBetween(min, max, granularity, '[]');
        /** @type {?} */
        const isAvailable = !min && !max;
        return isAfter || isBefore || isBetween || isAvailable;
    }
    /**
     *
     *  Format hour according to time format (12 or 24)
     * @param {?} currentHour
     * @param {?} format
     * @param {?} period
     * @return {?}
     */
    static formatHour(currentHour, format, period) {
        if (format === 24) {
            return currentHour;
        }
        /** @type {?} */
        let hour = period === TimePeriod.AM ? currentHour : currentHour + 12;
        if (period === TimePeriod.AM && hour === 12) {
            return 0;
        }
        else if (period === TimePeriod.PM && hour === 24) {
            return 12;
        }
        return hour;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1hZGFwdGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LW1hdGVyaWFsLXRpbWVwaWNrZXIvIiwic291cmNlcyI6WyJzcmMvYXBwL21hdGVyaWFsLXRpbWVwaWNrZXIvc2VydmljZXMvdGltZS1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEtBQUssT0FBTyxNQUFNLFFBQVEsQ0FBQztBQUVsQyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFDdEQsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLDRCQUE0QixDQUFDOztNQUVoRCxNQUFNLEdBQUcsT0FBTztBQUV0QixNQUFNLE9BQU8sV0FBVzs7Ozs7O0lBRXBCLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBWSxFQUFFLE1BQU0sR0FBRyxFQUFFOztjQUNqQyxVQUFVLEdBQUcsTUFBTSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU07UUFDN0UsT0FBTyxNQUFNLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDOUQsQ0FBQzs7Ozs7SUFFRCxNQUFNLENBQUMsbUJBQW1CLENBQUMsSUFBWTtRQUNuQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzNDLENBQUM7Ozs7Ozs7O0lBRUQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFZLEVBQUUsR0FBWSxFQUFFLEdBQVksRUFBRSxXQUFnQztRQUM3RixJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1AsT0FBTztTQUNWOztjQUNLLGFBQWEsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDOztjQUM5QyxPQUFPLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7ZUFDdEIsYUFBYSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDOztjQUM5QyxRQUFRLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7ZUFDdkIsYUFBYSxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDOztjQUMvQyxTQUFTLEdBQUcsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDO2VBQ3ZCLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDOztjQUNyRCxXQUFXLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHO1FBRWhDLE9BQU8sT0FBTyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksV0FBVyxDQUFDO0lBQzNELENBQUM7Ozs7Ozs7OztJQUtELE1BQU0sQ0FBQyxVQUFVLENBQUMsV0FBbUIsRUFBRSxNQUFjLEVBQUUsTUFBa0I7UUFDckUsSUFBSSxNQUFNLEtBQUssRUFBRSxFQUFFO1lBQ2YsT0FBTyxXQUFXLENBQUM7U0FDdEI7O1lBQ0csSUFBSSxHQUFHLE1BQU0sS0FBSyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBRyxFQUFFO1FBRXBFLElBQUksTUFBTSxLQUFLLFVBQVUsQ0FBQyxFQUFFLElBQUksSUFBSSxLQUFLLEVBQUUsRUFBRTtZQUN6QyxPQUFPLENBQUMsQ0FBQztTQUNaO2FBQU0sSUFBSSxNQUFNLEtBQUssVUFBVSxDQUFDLEVBQUUsSUFBSSxJQUFJLEtBQUssRUFBRSxFQUFFO1lBQ2hELE9BQU8sRUFBRSxDQUFDO1NBQ2I7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBfbW9tZW50IGZyb20gJ21vbWVudCc7XHJcbmltcG9ydCB7TW9tZW50LCB1bml0T2ZUaW1lfSBmcm9tICdtb21lbnQnO1xyXG5pbXBvcnQge1RpbWVGb3JtYXR9IGZyb20gJy4uL21vZGVscy90aW1lLWZvcm1hdC5lbnVtJztcclxuaW1wb3J0IHtUaW1lUGVyaW9kfSBmcm9tICcuLi9tb2RlbHMvdGltZS1wZXJpb2QuZW51bSc7XHJcblxyXG5jb25zdCBtb21lbnQgPSBfbW9tZW50O1xyXG5cclxuZXhwb3J0IGNsYXNzIFRpbWVBZGFwdGVyIHtcclxuXHJcbiAgICBzdGF0aWMgZm9ybWF0VGltZSh0aW1lOiBzdHJpbmcsIGZvcm1hdCA9IDEyKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCB0aW1lRm9ybWF0ID0gZm9ybWF0ID09PSAyNCA/IFRpbWVGb3JtYXQuVFdFTlRZX0ZPVVIgOiBUaW1lRm9ybWF0LlRXRUxWRTtcclxuICAgICAgICByZXR1cm4gbW9tZW50KHRpbWUsIFRpbWVGb3JtYXQuVFdFTFZFKS5mb3JtYXQodGltZUZvcm1hdCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNvbnZlcnRUaW1lVG9Nb21lbnQodGltZTogc3RyaW5nKTogTW9tZW50IHtcclxuICAgICAgICByZXR1cm4gbW9tZW50KHRpbWUsIFRpbWVGb3JtYXQuVFdFTFZFKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgaXNUaW1lQXZhaWxhYmxlKHRpbWU6IHN0cmluZywgbWluPzogTW9tZW50LCBtYXg/OiBNb21lbnQsIGdyYW51bGFyaXR5PzogdW5pdE9mVGltZS5TdGFydE9mKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKCF0aW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY29udmVydGVkVGltZSA9IHRoaXMuY29udmVydFRpbWVUb01vbWVudCh0aW1lKTtcclxuICAgICAgICBjb25zdCBpc0FmdGVyID0gKG1pbiAmJiAhbWF4KVxyXG4gICAgICAgICAgICAmJiBjb252ZXJ0ZWRUaW1lLmlzU2FtZU9yQWZ0ZXIobWluLCBncmFudWxhcml0eSk7XHJcbiAgICAgICAgY29uc3QgaXNCZWZvcmUgPSAobWF4ICYmICFtaW4pXHJcbiAgICAgICAgICAgICYmIGNvbnZlcnRlZFRpbWUuaXNTYW1lT3JCZWZvcmUobWF4LCBncmFudWxhcml0eSk7XHJcbiAgICAgICAgY29uc3QgaXNCZXR3ZWVuID0gKG1pbiAmJiBtYXgpXHJcbiAgICAgICAgICAgICYmIGNvbnZlcnRlZFRpbWUuaXNCZXR3ZWVuKG1pbiwgbWF4LCBncmFudWxhcml0eSwgJ1tdJyk7XHJcbiAgICAgICAgY29uc3QgaXNBdmFpbGFibGUgPSAhbWluICYmICFtYXg7XHJcblxyXG4gICAgICAgIHJldHVybiBpc0FmdGVyIHx8IGlzQmVmb3JlIHx8IGlzQmV0d2VlbiB8fCBpc0F2YWlsYWJsZTtcclxuICAgIH1cclxuXHJcbiAgICAvKioqXHJcbiAgICAgKiAgRm9ybWF0IGhvdXIgYWNjb3JkaW5nIHRvIHRpbWUgZm9ybWF0ICgxMiBvciAyNClcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGZvcm1hdEhvdXIoY3VycmVudEhvdXI6IG51bWJlciwgZm9ybWF0OiBudW1iZXIsIHBlcmlvZDogVGltZVBlcmlvZCk6IG51bWJlciB7XHJcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gMjQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRIb3VyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgaG91ciA9IHBlcmlvZCA9PT0gVGltZVBlcmlvZC5BTSA/IGN1cnJlbnRIb3VyIDogY3VycmVudEhvdXIgKyAxMjtcclxuXHJcbiAgICAgICAgaWYgKHBlcmlvZCA9PT0gVGltZVBlcmlvZC5BTSAmJiBob3VyID09PSAxMikge1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9IGVsc2UgaWYgKHBlcmlvZCA9PT0gVGltZVBlcmlvZC5QTSAmJiBob3VyID09PSAyNCkge1xyXG4gICAgICAgICAgICByZXR1cm4gMTI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBob3VyO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=