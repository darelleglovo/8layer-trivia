/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as _moment from 'moment';
import { TimeFormat } from '../models/time-format.enum';
import { TimePeriod } from '../models/time-period.enum';
/** @type {?} */
var moment = _moment;
var TimeAdapter = /** @class */ (function () {
    function TimeAdapter() {
    }
    /**
     * @param {?} time
     * @param {?=} format
     * @return {?}
     */
    TimeAdapter.formatTime = /**
     * @param {?} time
     * @param {?=} format
     * @return {?}
     */
    function (time, format) {
        if (format === void 0) { format = 12; }
        /** @type {?} */
        var timeFormat = format === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;
        return moment(time, TimeFormat.TWELVE).format(timeFormat);
    };
    /**
     * @param {?} time
     * @return {?}
     */
    TimeAdapter.convertTimeToMoment = /**
     * @param {?} time
     * @return {?}
     */
    function (time) {
        return moment(time, TimeFormat.TWELVE);
    };
    /**
     * @param {?} time
     * @param {?=} min
     * @param {?=} max
     * @param {?=} granularity
     * @return {?}
     */
    TimeAdapter.isTimeAvailable = /**
     * @param {?} time
     * @param {?=} min
     * @param {?=} max
     * @param {?=} granularity
     * @return {?}
     */
    function (time, min, max, granularity) {
        if (!time) {
            return;
        }
        /** @type {?} */
        var convertedTime = this.convertTimeToMoment(time);
        /** @type {?} */
        var isAfter = (min && !max)
            && convertedTime.isSameOrAfter(min, granularity);
        /** @type {?} */
        var isBefore = (max && !min)
            && convertedTime.isSameOrBefore(max, granularity);
        /** @type {?} */
        var isBetween = (min && max)
            && convertedTime.isBetween(min, max, granularity, '[]');
        /** @type {?} */
        var isAvailable = !min && !max;
        return isAfter || isBefore || isBetween || isAvailable;
    };
    /***
     *  Format hour according to time format (12 or 24)
     */
    /**
     *
     *  Format hour according to time format (12 or 24)
     * @param {?} currentHour
     * @param {?} format
     * @param {?} period
     * @return {?}
     */
    TimeAdapter.formatHour = /**
     *
     *  Format hour according to time format (12 or 24)
     * @param {?} currentHour
     * @param {?} format
     * @param {?} period
     * @return {?}
     */
    function (currentHour, format, period) {
        if (format === 24) {
            return currentHour;
        }
        /** @type {?} */
        var hour = period === TimePeriod.AM ? currentHour : currentHour + 12;
        if (period === TimePeriod.AM && hour === 12) {
            return 0;
        }
        else if (period === TimePeriod.PM && hour === 24) {
            return 12;
        }
        return hour;
    };
    return TimeAdapter;
}());
export { TimeAdapter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1hZGFwdGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LW1hdGVyaWFsLXRpbWVwaWNrZXIvIiwic291cmNlcyI6WyJzcmMvYXBwL21hdGVyaWFsLXRpbWVwaWNrZXIvc2VydmljZXMvdGltZS1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEtBQUssT0FBTyxNQUFNLFFBQVEsQ0FBQztBQUVsQyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFDdEQsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLDRCQUE0QixDQUFDOztJQUVoRCxNQUFNLEdBQUcsT0FBTztBQUV0QjtJQUFBO0lBNENBLENBQUM7Ozs7OztJQTFDVSxzQkFBVTs7Ozs7SUFBakIsVUFBa0IsSUFBWSxFQUFFLE1BQVc7UUFBWCx1QkFBQSxFQUFBLFdBQVc7O1lBQ2pDLFVBQVUsR0FBRyxNQUFNLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTTtRQUM3RSxPQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM5RCxDQUFDOzs7OztJQUVNLCtCQUFtQjs7OztJQUExQixVQUEyQixJQUFZO1FBQ25DLE9BQU8sTUFBTSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0MsQ0FBQzs7Ozs7Ozs7SUFFTSwyQkFBZTs7Ozs7OztJQUF0QixVQUF1QixJQUFZLEVBQUUsR0FBWSxFQUFFLEdBQVksRUFBRSxXQUFnQztRQUM3RixJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1AsT0FBTztTQUNWOztZQUNLLGFBQWEsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDOztZQUM5QyxPQUFPLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7ZUFDdEIsYUFBYSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDOztZQUM5QyxRQUFRLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7ZUFDdkIsYUFBYSxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDOztZQUMvQyxTQUFTLEdBQUcsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDO2VBQ3ZCLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDOztZQUNyRCxXQUFXLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHO1FBRWhDLE9BQU8sT0FBTyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksV0FBVyxDQUFDO0lBQzNELENBQUM7SUFFRDs7T0FFRzs7Ozs7Ozs7O0lBQ0ksc0JBQVU7Ozs7Ozs7O0lBQWpCLFVBQWtCLFdBQW1CLEVBQUUsTUFBYyxFQUFFLE1BQWtCO1FBQ3JFLElBQUksTUFBTSxLQUFLLEVBQUUsRUFBRTtZQUNmLE9BQU8sV0FBVyxDQUFDO1NBQ3RCOztZQUNHLElBQUksR0FBRyxNQUFNLEtBQUssVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUcsRUFBRTtRQUVwRSxJQUFJLE1BQU0sS0FBSyxVQUFVLENBQUMsRUFBRSxJQUFJLElBQUksS0FBSyxFQUFFLEVBQUU7WUFDekMsT0FBTyxDQUFDLENBQUM7U0FDWjthQUFNLElBQUksTUFBTSxLQUFLLFVBQVUsQ0FBQyxFQUFFLElBQUksSUFBSSxLQUFLLEVBQUUsRUFBRTtZQUNoRCxPQUFPLEVBQUUsQ0FBQztTQUNiO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVMLGtCQUFDO0FBQUQsQ0FBQyxBQTVDRCxJQTRDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIF9tb21lbnQgZnJvbSAnbW9tZW50JztcclxuaW1wb3J0IHtNb21lbnQsIHVuaXRPZlRpbWV9IGZyb20gJ21vbWVudCc7XHJcbmltcG9ydCB7VGltZUZvcm1hdH0gZnJvbSAnLi4vbW9kZWxzL3RpbWUtZm9ybWF0LmVudW0nO1xyXG5pbXBvcnQge1RpbWVQZXJpb2R9IGZyb20gJy4uL21vZGVscy90aW1lLXBlcmlvZC5lbnVtJztcclxuXHJcbmNvbnN0IG1vbWVudCA9IF9tb21lbnQ7XHJcblxyXG5leHBvcnQgY2xhc3MgVGltZUFkYXB0ZXIge1xyXG5cclxuICAgIHN0YXRpYyBmb3JtYXRUaW1lKHRpbWU6IHN0cmluZywgZm9ybWF0ID0gMTIpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IHRpbWVGb3JtYXQgPSBmb3JtYXQgPT09IDI0ID8gVGltZUZvcm1hdC5UV0VOVFlfRk9VUiA6IFRpbWVGb3JtYXQuVFdFTFZFO1xyXG4gICAgICAgIHJldHVybiBtb21lbnQodGltZSwgVGltZUZvcm1hdC5UV0VMVkUpLmZvcm1hdCh0aW1lRm9ybWF0KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgY29udmVydFRpbWVUb01vbWVudCh0aW1lOiBzdHJpbmcpOiBNb21lbnQge1xyXG4gICAgICAgIHJldHVybiBtb21lbnQodGltZSwgVGltZUZvcm1hdC5UV0VMVkUpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBpc1RpbWVBdmFpbGFibGUodGltZTogc3RyaW5nLCBtaW4/OiBNb21lbnQsIG1heD86IE1vbWVudCwgZ3JhbnVsYXJpdHk/OiB1bml0T2ZUaW1lLlN0YXJ0T2YpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIXRpbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjb252ZXJ0ZWRUaW1lID0gdGhpcy5jb252ZXJ0VGltZVRvTW9tZW50KHRpbWUpO1xyXG4gICAgICAgIGNvbnN0IGlzQWZ0ZXIgPSAobWluICYmICFtYXgpXHJcbiAgICAgICAgICAgICYmIGNvbnZlcnRlZFRpbWUuaXNTYW1lT3JBZnRlcihtaW4sIGdyYW51bGFyaXR5KTtcclxuICAgICAgICBjb25zdCBpc0JlZm9yZSA9IChtYXggJiYgIW1pbilcclxuICAgICAgICAgICAgJiYgY29udmVydGVkVGltZS5pc1NhbWVPckJlZm9yZShtYXgsIGdyYW51bGFyaXR5KTtcclxuICAgICAgICBjb25zdCBpc0JldHdlZW4gPSAobWluICYmIG1heClcclxuICAgICAgICAgICAgJiYgY29udmVydGVkVGltZS5pc0JldHdlZW4obWluLCBtYXgsIGdyYW51bGFyaXR5LCAnW10nKTtcclxuICAgICAgICBjb25zdCBpc0F2YWlsYWJsZSA9ICFtaW4gJiYgIW1heDtcclxuXHJcbiAgICAgICAgcmV0dXJuIGlzQWZ0ZXIgfHwgaXNCZWZvcmUgfHwgaXNCZXR3ZWVuIHx8IGlzQXZhaWxhYmxlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKipcclxuICAgICAqICBGb3JtYXQgaG91ciBhY2NvcmRpbmcgdG8gdGltZSBmb3JtYXQgKDEyIG9yIDI0KVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZm9ybWF0SG91cihjdXJyZW50SG91cjogbnVtYmVyLCBmb3JtYXQ6IG51bWJlciwgcGVyaW9kOiBUaW1lUGVyaW9kKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAoZm9ybWF0ID09PSAyNCkge1xyXG4gICAgICAgICAgICByZXR1cm4gY3VycmVudEhvdXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBob3VyID0gcGVyaW9kID09PSBUaW1lUGVyaW9kLkFNID8gY3VycmVudEhvdXIgOiBjdXJyZW50SG91ciArIDEyO1xyXG5cclxuICAgICAgICBpZiAocGVyaW9kID09PSBUaW1lUGVyaW9kLkFNICYmIGhvdXIgPT09IDEyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocGVyaW9kID09PSBUaW1lUGVyaW9kLlBNICYmIGhvdXIgPT09IDI0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAxMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhvdXI7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==