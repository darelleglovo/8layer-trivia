{"version":3,"file":"ngx-material-timepicker.js.map","sources":["ng://ngx-material-timepicker/src/app/material-timepicker/models/time-period.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-format.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/time-adapter.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-unit.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker-event.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-toggle-icon.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-toggle-button/ngx-material-timepicker-toggle.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-timepicker.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-theme.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/timepicker-time.namespace.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-hours-face/ngx-material-timepicker-hours-face.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-face/ngx-material-timepicker-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-button/ngx-material-timepicker-button.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial/ngx-material-timepicker-dial.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial-control/ngx-material-timepicker-dial-control.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-period/ngx-material-timepicker-period.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/style-sanitizer.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/overlay.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/minutes-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/autofocus.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.module.ts"],"sourcesContent":["export enum TimePeriod {\r\n    AM = 'AM',\r\n    PM = 'PM'\r\n}\r\n","export enum TimeFormat {\r\n    TWELVE = 'hh:mm a',\r\n    TWENTY_FOUR = 'HH:mm'\r\n}\r\n","import * as _moment from 'moment';\r\nimport {Moment, unitOfTime} from 'moment';\r\nimport {TimeFormat} from '../models/time-format.enum';\r\nimport {TimePeriod} from '../models/time-period.enum';\r\n\r\nconst moment = _moment;\r\n\r\nexport class TimeAdapter {\r\n\r\n    static formatTime(time: string, format = 12): string {\r\n        const timeFormat = format === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;\r\n        return moment(time, TimeFormat.TWELVE).format(timeFormat);\r\n    }\r\n\r\n    static convertTimeToMoment(time: string): Moment {\r\n        return moment(time, TimeFormat.TWELVE);\r\n    }\r\n\r\n    static isTimeAvailable(time: string, min?: Moment, max?: Moment, granularity?: unitOfTime.StartOf): boolean {\r\n        if (!time) {\r\n            return;\r\n        }\r\n        const convertedTime = this.convertTimeToMoment(time);\r\n        const isAfter = (min && !max)\r\n            && convertedTime.isSameOrAfter(min, granularity);\r\n        const isBefore = (max && !min)\r\n            && convertedTime.isSameOrBefore(max, granularity);\r\n        const isBetween = (min && max)\r\n            && convertedTime.isBetween(min, max, granularity, '[]');\r\n        const isAvailable = !min && !max;\r\n\r\n        return isAfter || isBefore || isBetween || isAvailable;\r\n    }\r\n\r\n    /***\r\n     *  Format hour according to time format (12 or 24)\r\n     */\r\n    static formatHour(currentHour: number, format: number, period: TimePeriod): number {\r\n        if (format === 24) {\r\n            return currentHour;\r\n        }\r\n        let hour = period === TimePeriod.AM ? currentHour : currentHour + 12;\r\n\r\n        if (period === TimePeriod.AM && hour === 12) {\r\n            return 0;\r\n        } else if (period === TimePeriod.PM && hour === 24) {\r\n            return 12;\r\n        }\r\n        return hour;\r\n    }\r\n\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {ClockFaceTime} from '../models/clock-face-time.interface';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport {TimePeriod} from '../models/time-period.enum';\r\nimport * as moment_ from 'moment';\r\nimport {TimeFormat} from '../models/time-format.enum';\r\nimport {TimeAdapter} from './time-adapter';\r\nimport {Moment} from 'moment';\r\n\r\nconst moment = moment_;\r\n\r\nconst DEFAULT_HOUR: ClockFaceTime = {\r\n    time: 12,\r\n    angle: 360\r\n};\r\nconst DEFAULT_MINUTE: ClockFaceTime = {\r\n    time: 0,\r\n    angle: 360\r\n};\r\n\r\n@Injectable()\r\nexport class NgxMaterialTimepickerService {\r\n\r\n    private hourSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_HOUR);\r\n    private minuteSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_MINUTE);\r\n    private periodSubject = new BehaviorSubject<TimePeriod>(TimePeriod.AM);\r\n\r\n    private set defaultTime(time: string) {\r\n        const defaultTime = moment(time, TimeFormat.TWENTY_FOUR).toDate();\r\n\r\n        if (moment(defaultTime).isValid()) {\r\n            this.hour = {...DEFAULT_HOUR, time: defaultTime.getHours()};\r\n            this.minute = {...DEFAULT_MINUTE, time: defaultTime.getMinutes()};\r\n            this.period = <TimePeriod>time.substr(time.length - 2).toUpperCase();\r\n        } else {\r\n            this.resetTime();\r\n        }\r\n    }\r\n\r\n    set hour(hour: ClockFaceTime) {\r\n        this.hourSubject.next(hour);\r\n    }\r\n\r\n    get selectedHour(): Observable<ClockFaceTime> {\r\n        return this.hourSubject.asObservable();\r\n    }\r\n\r\n    set minute(minute: ClockFaceTime) {\r\n        this.minuteSubject.next(minute);\r\n    }\r\n\r\n    get selectedMinute(): Observable<ClockFaceTime> {\r\n        return this.minuteSubject.asObservable();\r\n    }\r\n\r\n    set period(period: TimePeriod) {\r\n        this.periodSubject.next(period);\r\n    }\r\n\r\n    get selectedPeriod(): Observable<TimePeriod> {\r\n        return this.periodSubject.asObservable();\r\n    }\r\n\r\n\r\n    setDefaultTimeIfAvailable(time: string, min: Moment, max: Moment, format: number) {\r\n        if (TimeAdapter.isTimeAvailable(time, min, max, 'minutes')) {\r\n            this.defaultTime = TimeAdapter.formatTime(time, format);\r\n        }\r\n    }\r\n\r\n    getFullTime(format: number): string {\r\n        const hour = this.hourSubject.getValue().time;\r\n        const minute = this.minuteSubject.getValue().time;\r\n        const period = format === 12 ? this.periodSubject.getValue() : '';\r\n\r\n        return TimeAdapter.formatTime(`${hour}:${minute} ${period}`, format);\r\n    }\r\n\r\n    private resetTime(): void {\r\n        this.hour = {...DEFAULT_HOUR};\r\n        this.minute = {...DEFAULT_MINUTE};\r\n        this.period = TimePeriod.AM;\r\n    }\r\n}\r\n","export enum TimeUnit {\r\n    HOUR,\r\n    MINUTE\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Observable, Subject} from 'rxjs';\r\n\r\n@Injectable()\r\nexport class NgxMaterialTimepickerEventService {\r\n\r\n    private backdropClickSubject: Subject<MouseEvent> = new Subject();\r\n    private keydownEventSubject: Subject<KeyboardEvent> = new Subject();\r\n\r\n    get backdropClick(): Observable<MouseEvent> {\r\n        return this.backdropClickSubject.asObservable();\r\n    }\r\n\r\n    get keydownEvent(): Observable<KeyboardEvent> {\r\n        return this.keydownEventSubject.asObservable();\r\n    }\r\n\r\n    dispatchEvent(event: KeyboardEvent | MouseEvent): void {\r\n        switch (event.type) {\r\n            case 'click':\r\n                this.backdropClickSubject.next(<MouseEvent>event);\r\n                break;\r\n            case 'keydown':\r\n                this.keydownEventSubject.next(<KeyboardEvent>event);\r\n                break;\r\n            default:\r\n                throw new Error('no such event type');\r\n        }\r\n    }\r\n\r\n}\r\n","import {\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    Input,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output,\r\n    TemplateRef,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport {ClockFaceTime} from './models/clock-face-time.interface';\r\nimport {TimePeriod} from './models/time-period.enum';\r\nimport {merge, Subscription} from 'rxjs';\r\nimport {NgxMaterialTimepickerService} from './services/ngx-material-timepicker.service';\r\nimport {TimeUnit} from './models/time-unit.enum';\r\nimport {animate, AnimationEvent, style, transition, trigger} from '@angular/animations';\r\nimport {NgxMaterialTimepickerEventService} from './services/ngx-material-timepicker-event.service';\r\nimport {filter} from 'rxjs/operators';\r\nimport {TimepickerDirective} from './directives/ngx-timepicker.directive';\r\nimport {Moment} from 'moment';\r\n\r\nexport enum AnimationState {\r\n    ENTER = 'enter',\r\n    LEAVE = 'leave'\r\n}\r\n\r\n\r\n\r\nconst ESCAPE = 27;\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker',\r\n    templateUrl: './ngx-material-timepicker.component.html',\r\n    styleUrls: ['./ngx-material-timepicker.component.scss'],\r\n    animations: [\r\n        trigger('timepicker', [\r\n            transition(`* => ${AnimationState.ENTER}`, [\r\n                style({transform: 'translateY(-30%)'}),\r\n                animate('0.2s ease-out', style({transform: 'translateY(0)'}))\r\n            ]),\r\n            transition(`${AnimationState.ENTER} => ${AnimationState.LEAVE}`, [\r\n                style({transform: 'translateY(0)', opacity: 1}),\r\n                animate('0.2s ease-out', style({transform: 'translateY(-30%)', opacity: 0}))\r\n            ])\r\n        ])\r\n    ],\r\n    providers: [NgxMaterialTimepickerService]\r\n})\r\nexport class NgxMaterialTimepickerComponent implements OnInit, OnDestroy {\r\n\r\n    selectedHour: ClockFaceTime;\r\n    selectedMinute: ClockFaceTime;\r\n    selectedPeriod: TimePeriod;\r\n\r\n    timeUnit = TimeUnit;\r\n    activeTimeUnit = TimeUnit.HOUR;\r\n\r\n    isOpened = false;\r\n    animationState: AnimationState;\r\n\r\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\r\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\r\n    @Input('ESC') isEsc = true;\r\n    @Input() enableKeyboardInput: boolean;\r\n\r\n    @Input()\r\n    set minutesGap(gap: number) {\r\n        gap = Math.floor(gap);\r\n        this._minutesGap = gap <= 59 ? gap : 1;\r\n    }\r\n\r\n    get minutesGap(): number {\r\n        return this._minutesGap;\r\n    }\r\n\r\n    @Input()\r\n    set defaultTime(time: string) {\r\n        this.setDefaultTime(time);\r\n    }\r\n\r\n\r\n    @Output() timeSet = new EventEmitter<string>();\r\n    @Output() closed = new EventEmitter<null>();\r\n\r\n    @ViewChild('timepickerww') timepickerComponent: ElementRef;\r\n\r\n    private _minutesGap: number;\r\n    private timepickerInput: TimepickerDirective;\r\n    private subscriptions: Subscription[] = [];\r\n\r\n    constructor(private timepickerService: NgxMaterialTimepickerService,\r\n                private eventService: NgxMaterialTimepickerEventService) {\r\n\r\n        this.subscriptions.push(merge(this.eventService.backdropClick,\r\n            this.eventService.keydownEvent.pipe(filter(e => e.keyCode === ESCAPE && this.isEsc)))\r\n            .subscribe(() => this.close()));\r\n\r\n    }\r\n\r\n    get minTime(): string | Moment {\r\n        return this.timepickerInput && this.timepickerInput.min;\r\n    }\r\n\r\n    get maxTime(): string | Moment {\r\n        return this.timepickerInput && this.timepickerInput.max;\r\n    }\r\n\r\n    get disabled(): boolean {\r\n        return this.timepickerInput && this.timepickerInput.disabled;\r\n    }\r\n\r\n    get format(): number {\r\n        return this.timepickerInput && this.timepickerInput.format;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.subscriptions.push(this.timepickerService.selectedHour\r\n            .subscribe(hour => this.selectedHour = hour));\r\n\r\n        this.subscriptions.push(this.timepickerService.selectedMinute\r\n            .subscribe(minute => this.selectedMinute = minute));\r\n\r\n        this.subscriptions.push(this.timepickerService.selectedPeriod\r\n            .subscribe(period => this.selectedPeriod = period));\r\n    }\r\n\r\n    /***\r\n     * Register an input with this timepicker.\r\n     * input - The timepicker input to register with this timepicker\r\n     */\r\n    registerInput(input: TimepickerDirective): void {\r\n        if (this.timepickerInput) {\r\n            throw Error('A Timepicker can only be associated with a single input.');\r\n        }\r\n        this.timepickerInput = input;\r\n    }\r\n\r\n    onHourChange(hour: ClockFaceTime): void {\r\n        this.timepickerService.hour = hour;\r\n    }\r\n\r\n    onMinuteChange(minute: ClockFaceTime): void {\r\n        this.timepickerService.minute = minute;\r\n    }\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.timepickerService.period = period;\r\n    }\r\n\r\n    changeTimeUnit(unit: TimeUnit) {\r\n        this.activeTimeUnit = unit;\r\n    }\r\n\r\n    setTime() {\r\n        this.timeSet.next(this.timepickerService.getFullTime(this.format));\r\n        this.close();\r\n    }\r\n\r\n    setDefaultTime(time: string): void {\r\n        this.timepickerService.setDefaultTimeIfAvailable(time, this.minTime as Moment, this.maxTime as Moment, this.format);\r\n    }\r\n\r\n    open() {\r\n        this.isOpened = true;\r\n        this.animationState = AnimationState.ENTER;\r\n    }\r\n\r\n    close() {\r\n        this.animationState = AnimationState.LEAVE;\r\n    }\r\n\r\n    animationDone(event: AnimationEvent): void {\r\n        if (event.phaseName === 'done' && event.toState === AnimationState.LEAVE) {\r\n            this.isOpened = false;\r\n            this.activeTimeUnit = TimeUnit.HOUR;\r\n            this.closed.next();\r\n        }\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    onKeydown(e: KeyboardEvent) {\r\n        this.eventService.dispatchEvent(e);\r\n        e.stopPropagation();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n    }\r\n}\r\n","import {Directive} from '@angular/core';\r\n\r\n/* To override a default toggle icon */\r\n@Directive({selector: '[ngxMaterialTimepickerToggleIcon]'})\r\n\r\nexport class NgxMaterialTimepickerToggleIconDirective {\r\n}\r\n","import {Component, ContentChild, Input} from '@angular/core';\r\nimport {NgxMaterialTimepickerToggleIconDirective} from '../../directives/ngx-material-timepicker-toggle-icon.directive';\r\nimport {NgxMaterialTimepickerComponent} from '../../ngx-material-timepicker.component';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-toggle',\r\n    templateUrl: 'ngx-material-timepicker-toggle.component.html',\r\n    styleUrls: ['ngx-material-timepicker-toggle.component.scss']\r\n})\r\n\r\nexport class NgxMaterialTimepickerToggleComponent {\r\n\r\n    @Input('for') timepicker: NgxMaterialTimepickerComponent;\r\n\r\n    @Input()\r\n    get disabled(): boolean {\r\n        return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\r\n    }\r\n\r\n    set disabled(value: boolean) {\r\n        this._disabled = value;\r\n    }\r\n\r\n    private _disabled: boolean;\r\n\r\n    @ContentChild(NgxMaterialTimepickerToggleIconDirective) customIcon: NgxMaterialTimepickerToggleIconDirective;\r\n\r\n    open(event): void {\r\n        if (this.timepicker) {\r\n            this.timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n}\r\n","import {Directive, ElementRef, forwardRef, HostListener, Input, OnChanges, OnDestroy, SimpleChanges} from '@angular/core';\r\nimport {NgxMaterialTimepickerComponent} from '../ngx-material-timepicker.component';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {Subscription} from 'rxjs';\r\nimport {Moment} from 'moment';\r\nimport {TimeAdapter} from '../services/time-adapter';\r\n\r\nconst VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => TimepickerDirective),\r\n    multi: true\r\n};\r\n\r\n@Directive({\r\n    selector: '[ngxTimepicker]',\r\n    providers: [VALUE_ACCESSOR],\r\n    host: {\r\n        '[disabled]': 'disabled',\r\n        '(input)': 'onInput($event.target.value)',\r\n        '(blur)': 'onTouched()',\r\n    },\r\n})\r\nexport class TimepickerDirective implements ControlValueAccessor, OnDestroy, OnChanges {\r\n\r\n    @Input()\r\n    set format(value: number) {\r\n        this._format = value === 24 ? 24 : 12;\r\n    }\r\n\r\n    get format(): number {\r\n        return this._format;\r\n    }\r\n\r\n    private _format = 12;\r\n\r\n    @Input()\r\n    set min(value: string | Moment) {\r\n        if (typeof value === 'string') {\r\n            this._min = TimeAdapter.convertTimeToMoment(value);\r\n            return;\r\n        }\r\n        this._min = value;\r\n    }\r\n\r\n    get min(): string | Moment {\r\n        return this._min;\r\n    }\r\n\r\n    private _min: string | Moment;\r\n\r\n    @Input()\r\n    set max(value: string | Moment) {\r\n        if (typeof value === 'string') {\r\n            this._max = TimeAdapter.convertTimeToMoment(value);\r\n            return;\r\n        }\r\n        this._max = value;\r\n    }\r\n\r\n    get max(): string | Moment {\r\n        return this._max;\r\n    }\r\n\r\n    private _max: string | Moment;\r\n\r\n    @Input()\r\n    set value(value: string) {\r\n        if (!value) {\r\n            this._value = '';\r\n            this.updateInputValue();\r\n            return;\r\n        }\r\n        const time = TimeAdapter.formatTime(value, this._format);\r\n        if (TimeAdapter.isTimeAvailable(time, <Moment>this._min, <Moment>this._max, 'minutes')) {\r\n            this._value = time;\r\n            this.updateInputValue();\r\n            return;\r\n        }\r\n        console.warn('Selected time doesn\\'t match min or max value');\r\n    }\r\n\r\n    get value(): string {\r\n        return this._value;\r\n    }\r\n\r\n    private _value = '';\r\n\r\n    @Input('ngxTimepicker')\r\n    set timepicker(picker: NgxMaterialTimepickerComponent) {\r\n        this.registerTimepicker(picker);\r\n    }\r\n    private _timepicker: NgxMaterialTimepickerComponent;\r\n\r\n    @Input() disabled: boolean;\r\n    @Input() disableClick: boolean;\r\n    private timepickerSubscriptions: Subscription[] = [];\r\n    onTouched = () => {};\r\n    private onChange: (value: any) => void = () => {};\r\n\r\n    constructor(private elementRef: ElementRef) {\r\n    }\r\n\r\n    private set defaultTime(time: string) {\r\n        this._timepicker.setDefaultTime(time);\r\n    }\r\n\r\n    onInput(value: string) {\r\n        this.value = value;\r\n        this.onChange(value);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['value'] && changes['value'].currentValue) {\r\n            this.defaultTime = changes['value'].currentValue;\r\n        }\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(event) {\r\n        if (!this.disableClick) {\r\n            this._timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    writeValue(value: string): void {\r\n        this.value = value;\r\n        this.defaultTime = value;\r\n    }\r\n\r\n    registerOnChange(fn: (value: any) => void): void {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: () => void): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.timepickerSubscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n    private registerTimepicker(picker: NgxMaterialTimepickerComponent): void {\r\n        if (picker) {\r\n            this._timepicker = picker;\r\n            this._timepicker.registerInput(this);\r\n            this.timepickerSubscriptions.push(this._timepicker.timeSet.subscribe((time: string) => {\r\n                this.value = time;\r\n                this.onChange(this._value);\r\n                this.onTouched();\r\n            }));\r\n            this.timepickerSubscriptions.push(\r\n                this._timepicker.closed.subscribe(() => this.defaultTime = this._value));\r\n        } else {\r\n            throw new Error('NgxMaterialTimepickerComponent is not defined.' +\r\n                ' Please make sure you passed the timepicker to ngxTimepicker directive');\r\n        }\r\n    }\r\n\r\n    private updateInputValue(): void {\r\n        this.elementRef.nativeElement.value = this.value;\r\n    }\r\n\r\n}\r\n\r\n","import {AfterViewInit, Directive, ElementRef, Input} from '@angular/core';\r\nimport {NgxMaterialTimepickerTheme} from '../models/ngx-material-timepicker-theme.interface';\r\n\r\n@Directive({selector: '[ngxMaterialTimepickerTheme]'})\r\nexport class NgxMaterialTimepickerThemeDirective implements AfterViewInit {\r\n\r\n    @Input('ngxMaterialTimepickerTheme') theme: NgxMaterialTimepickerTheme;\r\n\r\n    private element: HTMLElement;\r\n\r\n    constructor(elementRef: ElementRef) {\r\n        this.element = elementRef.nativeElement;\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.theme) {\r\n            this.setTheme(this.theme);\r\n        }\r\n    }\r\n\r\n    private setTheme(theme): void {\r\n        for (let val in theme) {\r\n            if (theme.hasOwnProperty(val)) {\r\n                if (typeof theme[val] === 'string') {\r\n                    for (let prop in theme) {\r\n                        if (theme.hasOwnProperty(prop)) {\r\n                            this.element.style.setProperty(`--${camelCaseToDash(prop)}`, theme[prop]);\r\n                        }\r\n                    }\r\n                    return\r\n                }\r\n                this.setTheme(theme[val])\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n\r\nfunction camelCaseToDash(myStr) {\r\n    return myStr.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\r\n}\r\n","import {ClockFaceTime} from './models/clock-face-time.interface';\r\nimport * as _moment from 'moment';\r\nimport {TimeAdapter} from './services/time-adapter';\r\nimport {TimeFormat} from './models/time-format.enum';\r\nimport {DisabledTimeConfig} from './models/disabled-time-config.interface';\r\n\r\nconst moment = _moment;\r\n\r\nexport namespace TimepickerTime {\r\n\r\n    export function getHours(format: number): ClockFaceTime[] {\r\n        return Array(format).fill(1).map((v, i) => {\r\n            const angleStep = 30;\r\n            const time = v + i;\r\n            const angle = angleStep * time;\r\n            return {time: time === 24 ? 0 : time, angle};\r\n        });\r\n    }\r\n\r\n    export function disableHours(hours: ClockFaceTime[], config: DisabledTimeConfig): ClockFaceTime[] {\r\n        if (config.min || config.max) {\r\n\r\n            return hours.map(value => {\r\n                const hour = config.format === 24 ? value.time : TimeAdapter.formatHour(+value.time, config.format, config.period);\r\n                const currentTime = moment().hour(+hour).format(TimeFormat.TWELVE);\r\n\r\n                return {\r\n                    ...value,\r\n                    disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'hours')\r\n                };\r\n            });\r\n        }\r\n        return hours;\r\n    }\r\n\r\n    export function getMinutes(gap = 1): ClockFaceTime[] {\r\n        const minutesCount = 60;\r\n        const angleStep = 360 / minutesCount;\r\n        const minutes = [];\r\n\r\n        for (let i = 0; i < minutesCount; i++) {\r\n            const angle = angleStep * i;\r\n            if (i % gap === 0) {\r\n                minutes.push({time: i, angle: angle !== 0 ? angle : 360});\r\n            }\r\n        }\r\n        return minutes;\r\n    }\r\n\r\n    export function disableMinutes(minutes: ClockFaceTime[], selectedHour: number, config: DisabledTimeConfig) {\r\n        if (config.min || config.max) {\r\n\r\n            const hour = TimeAdapter.formatHour(selectedHour, config.format, config.period);\r\n\r\n            return minutes.map(value => {\r\n                const currentTime = moment().hour(hour).minute(+value.time).format(TimeFormat.TWELVE);\r\n\r\n                return {\r\n                    ...value,\r\n                    disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'minutes')\r\n                };\r\n            });\r\n        }\r\n        return minutes;\r\n    }\r\n}\r\n","import {EventEmitter, Input, Output} from '@angular/core';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {Moment} from 'moment';\r\nimport {TimepickerTime} from '../../timepicker-time.namespace';\r\n\r\n\r\nexport class NgxMaterialTimepickerHoursFace {\r\n\r\n    @Input() selectedHour: ClockFaceTime;\r\n    @Input() minTime: Moment;\r\n    @Input() maxTime: Moment;\r\n    @Input() format: number;\r\n\r\n    @Output() hourChange = new EventEmitter<ClockFaceTime>();\r\n    @Output() hourSelected = new EventEmitter<null>();\r\n\r\n    hoursList: ClockFaceTime[] = [];\r\n\r\n    protected constructor(format: number) {\r\n        this.hoursList = TimepickerTime.getHours(format);\r\n    }\r\n}\r\n","import {AfterContentInit, Component} from '@angular/core';\r\nimport {NgxMaterialTimepickerHoursFace} from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\r\nimport {TimepickerTime} from '../../timepicker-time.namespace';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-24-hours-face',\r\n    templateUrl: 'ngx-material-timepicker-24-hours-face.component.html'\r\n})\r\n\r\nexport class NgxMaterialTimepicker24HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements AfterContentInit {\r\n\r\n    constructor() {\r\n        super(24);\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.hoursList = TimepickerTime.disableHours(this.hoursList, {\r\n            min: this.minTime,\r\n            max: this.maxTime,\r\n            format: this.format\r\n        });\r\n    }\r\n}\r\n","import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\r\nimport {NgxMaterialTimepickerHoursFace} from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\r\nimport {TimePeriod} from '../../models/time-period.enum';\r\nimport {TimepickerTime} from '../../timepicker-time.namespace';\r\n\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-12-hours-face',\r\n    templateUrl: 'ngx-material-timepicker-12-hours-face.component.html'\r\n})\r\n\r\nexport class NgxMaterialTimepicker12HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements OnChanges {\r\n\r\n    @Input() period: TimePeriod;\r\n\r\n    constructor() {\r\n        super(12);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['period'] && changes['period'].currentValue) {\r\n            this.hoursList = TimepickerTime.disableHours(this.hoursList, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n}\r\n","import {Component, EventEmitter, Input, OnChanges, Output, SimpleChanges} from '@angular/core';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {TimeUnit} from '../../models/time-unit.enum';\r\nimport {TimePeriod} from '../../models/time-period.enum';\r\nimport {Moment} from 'moment';\r\nimport {TimepickerTime} from '../../timepicker-time.namespace';\r\n\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-minutes-face',\r\n    templateUrl: './ngx-material-timepicker-minutes-face.component.html'\r\n})\r\nexport class NgxMaterialTimepickerMinutesFaceComponent implements OnChanges {\r\n\r\n    minutesList: ClockFaceTime[] = [];\r\n    timeUnit = TimeUnit;\r\n\r\n    @Input() selectedMinute: ClockFaceTime;\r\n    @Input() selectedHour: number;\r\n    @Input() period: TimePeriod;\r\n    @Input() minTime: Moment;\r\n    @Input() maxTime: Moment;\r\n    @Input() format: number;\r\n    @Input() minutesGap: number;\r\n\r\n    @Output() minuteChange = new EventEmitter<ClockFaceTime>();\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['period'] && changes['period'].currentValue) {\r\n            const minutes = TimepickerTime.getMinutes(this.minutesGap);\r\n            this.minutesList = TimepickerTime.disableMinutes(minutes, this.selectedHour, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n","import {\r\n    AfterViewInit,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    Output,\r\n    SimpleChanges,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {TimeUnit} from '../../models/time-unit.enum';\r\n\r\nconst CLOCK_HAND_STYLES = {\r\n    small: {\r\n        height: '75px',\r\n        top: 'calc(50% - 75px)'\r\n    },\r\n    large: {\r\n        height: '103px',\r\n        top: 'calc(50% - 103px)'\r\n    }\r\n};\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-face',\r\n    templateUrl: './ngx-material-timepicker-face.component.html',\r\n    styleUrls: ['./ngx-material-timepicker-face.component.scss']\r\n})\r\nexport class NgxMaterialTimepickerFaceComponent implements AfterViewInit, OnChanges, OnDestroy {\r\n\r\n    timeUnit = TimeUnit;\r\n\r\n    isClockFaceDisabled: boolean;\r\n    innerClockFaceSize = 85;\r\n\r\n    @Input() faceTime: ClockFaceTime[];\r\n    @Input() selectedTime: ClockFaceTime;\r\n    @Input() unit: TimeUnit;\r\n    @Input() format: number;\r\n    @Input() minutesGap: number;\r\n\r\n    @Output() timeChange = new EventEmitter<ClockFaceTime>();\r\n    @Output() timeSelected = new EventEmitter<null>();\r\n\r\n    @ViewChild('clockFace') clockFace: ElementRef;\r\n    @ViewChild('clockHand') clockHand: ElementRef;\r\n\r\n    private isStarted: boolean;\r\n    private touchStartHandler: () => any;\r\n    private touchEndHandler: () => any;\r\n\r\n    ngAfterViewInit() {\r\n        this.setClockHandPosition();\r\n        this.addTouchEvents();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        const faceTimeChanges = changes['faceTime'];\r\n        const selectedTimeChanges = changes['selectedTime'];\r\n\r\n        if ((faceTimeChanges && faceTimeChanges.currentValue)\r\n            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {\r\n            /* Set time according to passed an input value */\r\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\r\n        }\r\n        if (selectedTimeChanges && selectedTimeChanges.currentValue) {\r\n            this.setClockHandPosition();\r\n        }\r\n        if (faceTimeChanges && faceTimeChanges.currentValue) {\r\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\r\n            setTimeout(() => this.selectAvailableTime());\r\n        }\r\n    }\r\n\r\n\r\n    trackByTime(_, time: ClockFaceTime): string | number {\r\n        return time.time;\r\n    }\r\n\r\n    @HostListener('mousedown', ['$event'])\r\n    onMousedown(e: MouseEvent | TouchEvent) {\r\n        e.preventDefault();\r\n        this.isStarted = true;\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    @HostListener('touchmove', ['$event.changedTouches[0]'])\r\n    @HostListener('touchend', ['$event.changedTouches[0]'])\r\n    @HostListener('mousemove', ['$event'])\r\n    selectTime(e: MouseEvent | Touch): void {\r\n\r\n        if (!this.isStarted && (e instanceof MouseEvent && e.type !== 'click')) {\r\n            return;\r\n        }\r\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\r\n\r\n        /* Get x0 and y0 of the circle */\r\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\r\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\r\n        /* Counting the arctangent and convert it to from radian to deg */\r\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\r\n        /* Get angle according to quadrant */\r\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\r\n        /* Check if selected time from the inner clock face (24 hours format only) */\r\n        const isInnerClockChosen = this.format && this.isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\r\n        /* Round angle according to angle step */\r\n        const angleStep = this.unit === TimeUnit.MINUTE ? 6 : 30;\r\n        const roundedAngle = isInnerClockChosen\r\n            ? roundAngle(circleAngle, angleStep) + 360\r\n            : roundAngle(circleAngle, angleStep);\r\n\r\n        const selectedTime = this.faceTime.find(val => val.angle === roundedAngle);\r\n\r\n        if (selectedTime && !selectedTime.disabled) {\r\n            this.timeChange.next(selectedTime);\r\n\r\n            /* To let know whether user ended interaction with clock face */\r\n            if (!this.isStarted) {\r\n                this.timeSelected.next();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    @HostListener('mouseup', ['$event'])\r\n    onMouseup(e: MouseEvent | TouchEvent) {\r\n        e.preventDefault();\r\n        this.isStarted = false;\r\n    }\r\n\r\n    isHourSelected(hour: number): boolean {\r\n        return (hour === this.selectedTime.time) && !this.isClockFaceDisabled;\r\n    }\r\n\r\n    isMinuteSelected(minute: number): boolean {\r\n        return ((this.selectedTime.time === minute) && (minute % (this.minutesGap || 5) === 0)) && !this.isClockFaceDisabled;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.removeTouchEvents();\r\n    }\r\n\r\n    private addTouchEvents(): void {\r\n        this.touchStartHandler = this.onMousedown.bind(this);\r\n        this.touchEndHandler = this.onMouseup.bind(this);\r\n\r\n        this.clockFace.nativeElement.addEventListener('touchstart', this.touchStartHandler);\r\n        this.clockFace.nativeElement.addEventListener('touchend', this.touchEndHandler);\r\n    }\r\n\r\n    private removeTouchEvents(): void {\r\n        this.clockFace.nativeElement.removeEventListener('touchstart', this.touchStartHandler);\r\n        this.clockFace.nativeElement.removeEventListener('touchend', this.touchEndHandler);\r\n    }\r\n\r\n    private setClockHandPosition(): void {\r\n        if (this.format === 24) {\r\n            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\r\n                this.decreaseClockHand();\r\n            } else {\r\n                this.increaseClockHand();\r\n            }\r\n        }\r\n\r\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\r\n    }\r\n\r\n    private selectAvailableTime(): void {\r\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\r\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\r\n\r\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\r\n            const availableTime = this.faceTime.find(time => !time.disabled);\r\n\r\n            this.timeChange.next(availableTime);\r\n        }\r\n    }\r\n\r\n    private isInnerClockFace(x0: number, y0: number, x: number, y: number): boolean {\r\n        /* Detect whether time from the inner clock face or not (24 format only) */\r\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\r\n    }\r\n\r\n    private decreaseClockHand(): void {\r\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\r\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\r\n    }\r\n\r\n    private increaseClockHand(): void {\r\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\r\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\r\n    }\r\n}\r\n\r\nfunction roundAngle(angle: number, step: number): number {\r\n    return Math.round(angle / step) * step;\r\n}\r\n\r\nfunction countAngleByCords(x0: number, y0: number, x: number, y: number, currentAngle: number): number {\r\n    if (y > y0 && x >= x0) {// II quarter\r\n        return 180 - currentAngle;\r\n    } else if (y > y0 && x < x0) {// III quarter\r\n        return 180 + currentAngle;\r\n    } else if (y < y0 && x < x0) {// IV quarter\r\n        return 360 - currentAngle;\r\n    } else {// I quarter\r\n        return currentAngle;\r\n    }\r\n}\r\n","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-button',\r\n    templateUrl: './ngx-material-timepicker-button.component.html',\r\n    styleUrls: ['./ngx-material-timepicker-button.component.scss']\r\n})\r\nexport class NgxMaterialTimepickerButtonComponent {\r\n}\r\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges} from '@angular/core';\r\nimport {TimePeriod} from '../../models/time-period.enum';\r\nimport {TimeUnit} from '../../models/time-unit.enum';\r\nimport {TimepickerTime} from '../../timepicker-time.namespace';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {Moment} from 'moment';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-dial',\r\n    templateUrl: 'ngx-material-timepicker-dial.component.html',\r\n    styleUrls: ['ngx-material-timepicker-dial.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMaterialTimepickerDialComponent implements OnChanges {\r\n\r\n    timeUnit = TimeUnit;\r\n\r\n    hours: ClockFaceTime[];\r\n    minutes: ClockFaceTime[];\r\n\r\n    @Input() hour: number | string;\r\n    @Input() minute: number | string;\r\n    @Input() format: number;\r\n    @Input() period: TimePeriod;\r\n    @Input() activeTimeUnit: TimeUnit;\r\n    @Input() minTime: Moment;\r\n    @Input() maxTime: Moment;\r\n    @Input() isEditable: boolean;\r\n    @Input() minutesGap: number;\r\n\r\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\r\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\r\n    @Output() hourChanged = new EventEmitter<ClockFaceTime>();\r\n    @Output() minuteChanged = new EventEmitter<ClockFaceTime>();\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['period'] && changes['period'].currentValue\r\n            || changes['format'] && changes['format'].currentValue) {\r\n            const hours = TimepickerTime.getHours(this.format);\r\n\r\n            this.hours = TimepickerTime.disableHours(hours, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n        if (changes['period'] && changes['period'].currentValue\r\n            || changes['hour'] && changes['hour'].currentValue) {\r\n            const minutes = TimepickerTime.getMinutes(this.minutesGap);\r\n\r\n            this.minutes = TimepickerTime.disableMinutes(minutes, +this.hour, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n\r\n    changeTimeUnit(unit: TimeUnit): void {\r\n        this.timeUnitChanged.next(unit);\r\n    }\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.periodChanged.next(period);\r\n    }\r\n\r\n    changeHour(hour: ClockFaceTime): void {\r\n        this.hourChanged.next(hour);\r\n    }\r\n\r\n    changeMinute(minute: ClockFaceTime): void {\r\n        this.minuteChanged.next(minute);\r\n    }\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\nimport * as moment from 'moment';\r\nimport {TimeUnit} from '../models/time-unit.enum';\r\n\r\n@Pipe({\r\n    name: 'timeFormatter'\r\n})\r\nexport class TimeFormatterPipe implements PipeTransform {\r\n\r\n    transform(time: number, timeUnit: TimeUnit): any {\r\n        if (time === undefined) {\r\n            return time;\r\n        }\r\n        switch (timeUnit) {\r\n            case TimeUnit.HOUR:\r\n                return moment.utc(time * 3600 * 1000).format('HH');\r\n            case TimeUnit.MINUTE:\r\n                return moment.utc(time * 60 * 1000).format('mm');\r\n            default:\r\n                throw new Error('no such time unit');\r\n        }\r\n    }\r\n\r\n}\r\n","import {Component, EventEmitter, Input, OnChanges, Output, SimpleChanges} from '@angular/core';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {TimeUnit} from '../../models/time-unit.enum';\r\nimport {TimeFormatterPipe} from '../../pipes/time-formatter.pipe';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-dial-control',\r\n    templateUrl: 'ngx-material-timepicker-dial-control.component.html',\r\n    styleUrls: ['ngx-material-timepicker-dial-control.component.scss']\r\n})\r\nexport class NgxMaterialTimepickerDialControlComponent implements OnChanges {\r\n\r\n    previousTime: number | string;\r\n\r\n    @Input() timeList: ClockFaceTime[];\r\n    @Input() timeUnit: TimeUnit;\r\n    @Input() time: string;\r\n    @Input() isActive: boolean;\r\n    @Input() isEditable: boolean;\r\n\r\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\r\n    @Output() timeChanged = new EventEmitter<ClockFaceTime>();\r\n\r\n    private get selectedTime(): ClockFaceTime {\r\n        if (!!this.time) {\r\n            return this.timeList.find(t => t.time === +this.time);\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['time'] && (changes['time'].currentValue !== undefined)) {\r\n            if (this.isEditable && !changes['time'].firstChange) {\r\n                return;\r\n            }\r\n            this.time = new TimeFormatterPipe().transform(+changes['time'].currentValue, this.timeUnit)\r\n        }\r\n    }\r\n\r\n    saveTimeAndChangeTimeUnit(event: FocusEvent, unit: TimeUnit): void {\r\n        event.preventDefault();\r\n        this.previousTime = this.time;\r\n        this.timeUnitChanged.next(unit);\r\n    }\r\n\r\n    updateTime(): void {\r\n        const time = this.selectedTime;\r\n        if (time) {\r\n            this.timeChanged.next(time);\r\n            this.previousTime = time.time;\r\n        }\r\n    }\r\n\r\n    formatTime(): void {\r\n        if (this.isEditable) {\r\n            const time = this.time || this.previousTime;\r\n            this.time = new TimeFormatterPipe().transform(+time, this.timeUnit);\r\n        }\r\n    }\r\n\r\n    onKeyDown(e: KeyboardEvent): void {\r\n        const char = String.fromCharCode(e.keyCode);\r\n\r\n\r\n        if ((!isInputAllowed(e)) || isTimeDisabledToChange(this.time, char, this.timeList)) {\r\n            e.preventDefault();\r\n        }\r\n\r\n        if (isInputAllowed(e)) {\r\n            this.changeTimeByArrow(e.keyCode);\r\n        }\r\n    }\r\n\r\n    private changeTimeByArrow(keyCode: number): void {\r\n        const ARROW_UP = 38;\r\n        const ARROW_DOWN = 40;\r\n        let time: string;\r\n\r\n        if (keyCode === ARROW_UP) {\r\n            time = String(+this.time + 1);\r\n        } else if (keyCode === ARROW_DOWN) {\r\n            time = String(+this.time - 1);\r\n        }\r\n\r\n        if (!isTimeUnavailable(time, this.timeList)) {\r\n            this.time = time;\r\n            this.updateTime();\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction isInputAllowed(e: KeyboardEvent): boolean {\r\n    // Allow: backspace, delete, tab, escape, enter\r\n    if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) ||\r\n        // Allow: Ctrl/cmd+A\r\n        (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n        // Allow: Ctrl/cmd+C\r\n        (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n        // Allow: Ctrl/cmd+X\r\n        (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n        // Allow: home, end, left, right, up, down\r\n        (e.keyCode >= 35 && e.keyCode <= 40)) {\r\n\r\n        return true;\r\n    }\r\n    return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105))\r\n}\r\n\r\nfunction isTimeDisabledToChange(currentTime: string, nextTime: string, timeList: ClockFaceTime[]): boolean {\r\n    const isNumber = /\\d/.test(nextTime);\r\n\r\n    if (isNumber) {\r\n        const time = currentTime + nextTime;\r\n        return isTimeUnavailable(time, timeList);\r\n    }\r\n}\r\n\r\nfunction isTimeUnavailable(time: string, timeList: ClockFaceTime[]): boolean {\r\n    const selectedTime = timeList.find(value => value.time === +time);\r\n    return !selectedTime || (selectedTime && selectedTime.disabled);\r\n}\r\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\r\nimport {TimePeriod} from '../../models/time-period.enum';\r\nimport {TimeUnit} from '../../models/time-unit.enum';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {TimepickerTime} from '../../timepicker-time.namespace';\r\nimport {Moment} from 'moment';\r\nimport {animate, sequence, style, transition, trigger} from '@angular/animations';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-period',\r\n    templateUrl: 'ngx-material-timepicker-period.component.html',\r\n    styleUrls: ['ngx-material-timepicker-period.component.scss'],\r\n    animations: [\r\n        trigger('scaleInOut', [\r\n            transition(':enter', [\r\n                style({transform: 'scale(0)'}),\r\n                animate('.2s', style({transform: 'scale(1)'})),\r\n                sequence([\r\n                    animate('3s', style({opacity: 1})),\r\n                    animate('.3s', style({opacity: 0}))\r\n                ])\r\n            ])\r\n        ])\r\n    ]\r\n})\r\nexport class NgxMaterialTimepickerPeriodComponent {\r\n\r\n    timePeriod = TimePeriod;\r\n    isPeriodAvailable = true;\r\n\r\n    @Input() selectedPeriod: TimePeriod;\r\n    @Input() format: number;\r\n    @Input() activeTimeUnit: TimeUnit;\r\n    @Input() hours: ClockFaceTime[];\r\n    @Input() minutes: ClockFaceTime[];\r\n    @Input() minTime: Moment;\r\n    @Input() maxTime: Moment;\r\n    @Input() selectedHour: number | string;\r\n\r\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.isPeriodAvailable = this.isSwitchPeriodAvailable(period);\r\n        if (this.isPeriodAvailable) {\r\n            this.periodChanged.next(period);\r\n        }\r\n    }\r\n\r\n    animationDone(): void {\r\n        this.isPeriodAvailable = true;\r\n    }\r\n\r\n    private isSwitchPeriodAvailable(period: TimePeriod): boolean {\r\n        const time = this.getDisabledTimeByPeriod(period);\r\n        return !time.every(t => t.disabled);\r\n    }\r\n\r\n    private getDisabledTimeByPeriod(period: TimePeriod): ClockFaceTime[] {\r\n        switch (this.activeTimeUnit) {\r\n            case TimeUnit.HOUR:\r\n                return TimepickerTime.disableHours(this.hours, {\r\n                    min: this.minTime,\r\n                    max: this.maxTime,\r\n                    format: this.format,\r\n                    period\r\n                });\r\n            case TimeUnit.MINUTE:\r\n                return TimepickerTime.disableMinutes(this.minutes, +this.selectedHour, {\r\n                    min: this.minTime,\r\n                    max: this.maxTime,\r\n                    format: this.format,\r\n                    period\r\n                });\r\n            default:\r\n                throw new Error('no such TimeUnit');\r\n        }\r\n    }\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\nimport {DomSanitizer} from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n    name: 'styleSanitizer'\r\n})\r\nexport class StyleSanitizerPipe implements PipeTransform {\r\n\r\n    constructor(private domSanitizer: DomSanitizer) {\r\n    }\r\n\r\n    transform(value: string): any {\r\n        if (!value) {\r\n            return value;\r\n        }\r\n        return this.domSanitizer.bypassSecurityTrustStyle(value);\r\n    }\r\n\r\n}\r\n","import {Directive, HostListener} from '@angular/core';\r\nimport {NgxMaterialTimepickerEventService} from '../services/ngx-material-timepicker-event.service';\r\n\r\n@Directive({\r\n    selector: '[overlay]'\r\n})\r\nexport class OverlayDirective {\r\n\r\n    constructor(private eventService: NgxMaterialTimepickerEventService) {\r\n    }\r\n\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(e: MouseEvent) {\r\n        this.eventService.dispatchEvent(e);\r\n        e.preventDefault();\r\n    }\r\n\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'minutesFormatter'\r\n})\r\nexport class MinutesFormatterPipe implements PipeTransform {\r\n\r\n    transform(minute: number, gap = 5): number | string {\r\n        if (!minute) {\r\n            return minute;\r\n        }\r\n\r\n        return minute % gap === 0 ? minute : '';\r\n    }\r\n\r\n}\r\n","import {Directive, ElementRef, Inject, Input, OnChanges, OnDestroy, Optional} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\n\r\n@Directive({\r\n    selector: '[timepickerAutofocus]'\r\n})\r\nexport class AutofocusDirective implements OnChanges, OnDestroy {\r\n\r\n    @Input('timepickerAutofocus') isFocusActive: boolean;\r\n\r\n    private activeElement: HTMLElement;\r\n\r\n    constructor(private element: ElementRef, @Optional() @Inject(DOCUMENT) private document: any) {\r\n        this.activeElement = this.document.activeElement;\r\n    }\r\n\r\n    ngOnChanges() {\r\n        if (this.isFocusActive) {\r\n            // To avoid ExpressionChangedAfterItHasBeenCheckedError;\r\n            setTimeout(() => this.element.nativeElement.focus());\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        // To avoid ExpressionChangedAfterItHasBeenCheckedError;\r\n        setTimeout(() => this.activeElement.focus());\r\n    }\r\n}\r\n","import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgxMaterialTimepickerComponent} from './ngx-material-timepicker.component';\r\nimport {FormsModule} from '@angular/forms';\r\nimport {NgxMaterialTimepickerToggleComponent} from './components/timepicker-toggle-button/ngx-material-timepicker-toggle.component';\r\nimport {TimepickerDirective} from './directives/ngx-timepicker.directive';\r\nimport {NgxMaterialTimepickerToggleIconDirective} from './directives/ngx-material-timepicker-toggle-icon.directive';\r\nimport {NgxMaterialTimepickerThemeDirective} from './directives/ngx-material-timepicker-theme.directive';\r\nimport {NgxMaterialTimepicker24HoursFaceComponent} from './components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component';\r\nimport {NgxMaterialTimepicker12HoursFaceComponent} from './components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component';\r\nimport {NgxMaterialTimepickerMinutesFaceComponent} from './components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component';\r\nimport {NgxMaterialTimepickerFaceComponent} from './components/timepicker-face/ngx-material-timepicker-face.component';\r\nimport {NgxMaterialTimepickerButtonComponent} from './components/timepicker-button/ngx-material-timepicker-button.component';\r\nimport {NgxMaterialTimepickerDialComponent} from './components/timepicker-dial/ngx-material-timepicker-dial.component';\r\nimport {NgxMaterialTimepickerDialControlComponent} from './components/timepicker-dial-control/ngx-material-timepicker-dial-control.component';\r\nimport {NgxMaterialTimepickerPeriodComponent} from './components/timepicker-period/ngx-material-timepicker-period.component';\r\nimport {StyleSanitizerPipe} from './pipes/style-sanitizer.pipe';\r\nimport {TimeFormatterPipe} from './pipes/time-formatter.pipe';\r\nimport {OverlayDirective} from './directives/overlay.directive';\r\nimport {MinutesFormatterPipe} from './pipes/minutes-formatter.pipe';\r\nimport {AutofocusDirective} from './directives/autofocus.directive';\r\nimport {NgxMaterialTimepickerService} from './services/ngx-material-timepicker.service';\r\nimport {NgxMaterialTimepickerEventService} from './services/ngx-material-timepicker-event.service';\r\n\r\n\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule\r\n    ],\r\n    exports: [\r\n        NgxMaterialTimepickerComponent,\r\n        NgxMaterialTimepickerToggleComponent,\r\n        TimepickerDirective,\r\n        NgxMaterialTimepickerToggleIconDirective,\r\n        NgxMaterialTimepickerThemeDirective\r\n    ],\r\n    declarations: [\r\n        NgxMaterialTimepickerComponent,\r\n        NgxMaterialTimepicker24HoursFaceComponent,\r\n        NgxMaterialTimepicker12HoursFaceComponent,\r\n        NgxMaterialTimepickerMinutesFaceComponent,\r\n        NgxMaterialTimepickerFaceComponent,\r\n        NgxMaterialTimepickerToggleComponent,\r\n        NgxMaterialTimepickerButtonComponent,\r\n        NgxMaterialTimepickerDialComponent,\r\n        NgxMaterialTimepickerDialControlComponent,\r\n        NgxMaterialTimepickerPeriodComponent,\r\n        StyleSanitizerPipe,\r\n        TimeFormatterPipe,\r\n        TimepickerDirective,\r\n        OverlayDirective,\r\n        NgxMaterialTimepickerToggleIconDirective,\r\n        AutofocusDirective,\r\n        MinutesFormatterPipe,\r\n        NgxMaterialTimepickerThemeDirective\r\n    ]\r\n})\r\nexport class NgxMaterialTimepickerModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: NgxMaterialTimepickerModule,\r\n            providers: [NgxMaterialTimepickerService, NgxMaterialTimepickerEventService]\r\n        };\r\n    }\r\n}\r\n"],"names":["moment","_moment","moment_","tslib_1.__extends","moment.utc"],"mappings":";;;;;;;;;;;;;;;;;IACI,IAAK,IAAI;IACT,IAAK,IAAI;;;;;;;;;ICDT,QAAS,SAAS;IAClB,aAAc,OAAO;;;;;;;ACFzB;IAKMA,QAAM,GAAGC,MAAO;AAEtB;IAAA;KA4CC;;;;;;IA1CU,sBAAU;;;;;IAAjB,UAAkB,IAAY,EAAE,MAAW;QAAX,uBAAA,EAAA,WAAW;;YACjC,UAAU,GAAG,MAAM,KAAK,EAAE,GAAG,UAAU,CAAC,WAAW,GAAG,UAAU,CAAC,MAAM;QAC7E,OAAOD,QAAM,CAAC,IAAI,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;KAC7D;;;;;IAEM,+BAAmB;;;;IAA1B,UAA2B,IAAY;QACnC,OAAOA,QAAM,CAAC,IAAI,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;KAC1C;;;;;;;;IAEM,2BAAe;;;;;;;IAAtB,UAAuB,IAAY,EAAE,GAAY,EAAE,GAAY,EAAE,WAAgC;QAC7F,IAAI,CAAC,IAAI,EAAE;YACP,OAAO;SACV;;YACK,aAAa,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;;YAC9C,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG;eACrB,aAAa,CAAC,aAAa,CAAC,GAAG,EAAE,WAAW,CAAC;;YAC9C,QAAQ,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG;eACtB,aAAa,CAAC,cAAc,CAAC,GAAG,EAAE,WAAW,CAAC;;YAC/C,SAAS,GAAG,CAAC,GAAG,IAAI,GAAG;eACtB,aAAa,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,WAAW,EAAE,IAAI,CAAC;;YACrD,WAAW,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG;QAEhC,OAAO,OAAO,IAAI,QAAQ,IAAI,SAAS,IAAI,WAAW,CAAC;KAC1D;;;;;;;;;;;;IAKM,sBAAU;;;;;;;;IAAjB,UAAkB,WAAmB,EAAE,MAAc,EAAE,MAAkB;QACrE,IAAI,MAAM,KAAK,EAAE,EAAE;YACf,OAAO,WAAW,CAAC;SACtB;;YACG,IAAI,GAAG,MAAM,KAAK,UAAU,CAAC,EAAE,GAAG,WAAW,GAAG,WAAW,GAAG,EAAE;QAEpE,IAAI,MAAM,KAAK,UAAU,CAAC,EAAE,IAAI,IAAI,KAAK,EAAE,EAAE;YACzC,OAAO,CAAC,CAAC;SACZ;aAAM,IAAI,MAAM,KAAK,UAAU,CAAC,EAAE,IAAI,IAAI,KAAK,EAAE,EAAE;YAChD,OAAO,EAAE,CAAC;SACb;QACD,OAAO,IAAI,CAAC;KACf;IAEL,kBAAC;CAAA,IAAA;;;;;;;IC1CKA,QAAM,GAAGE,MAAO;;IAEhB,YAAY,GAAkB;IAChC,IAAI,EAAE,EAAE;IACR,KAAK,EAAE,GAAG;CACb;;IACK,cAAc,GAAkB;IAClC,IAAI,EAAE,CAAC;IACP,KAAK,EAAE,GAAG;CACb;AAED;IAAA;QAGY,gBAAW,GAAG,IAAI,eAAe,CAAgB,YAAY,CAAC,CAAC;QAC/D,kBAAa,GAAG,IAAI,eAAe,CAAgB,cAAc,CAAC,CAAC;QACnE,kBAAa,GAAG,IAAI,eAAe,CAAa,UAAU,CAAC,EAAE,CAAC,CAAC;KA0D1E;IAxDG,sBAAY,qDAAW;;;;;;QAAvB,UAAwB,IAAY;;gBAC1B,WAAW,GAAGF,QAAM,CAAC,IAAI,EAAE,UAAU,CAAC,WAAW,CAAC,CAAC,MAAM,EAAE;YAEjE,IAAIA,QAAM,CAAC,WAAW,CAAC,CAAC,OAAO,EAAE,EAAE;gBAC/B,IAAI,CAAC,IAAI,gBAAO,YAAY,IAAE,IAAI,EAAE,WAAW,CAAC,QAAQ,EAAE,GAAC,CAAC;gBAC5D,IAAI,CAAC,MAAM,gBAAO,cAAc,IAAE,IAAI,EAAE,WAAW,CAAC,UAAU,EAAE,GAAC,CAAC;gBAClE,IAAI,CAAC,MAAM,sBAAe,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,WAAW,EAAE,EAAA,CAAC;aACxE;iBAAM;gBACH,IAAI,CAAC,SAAS,EAAE,CAAC;aACpB;SACJ;;;OAAA;IAED,sBAAI,8CAAI;;;;;QAAR,UAAS,IAAmB;YACxB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC/B;;;OAAA;IAED,sBAAI,sDAAY;;;;QAAhB;YACI,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC;SAC1C;;;OAAA;IAED,sBAAI,gDAAM;;;;;QAAV,UAAW,MAAqB;YAC5B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACnC;;;OAAA;IAED,sBAAI,wDAAc;;;;QAAlB;YACI,OAAO,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC;SAC5C;;;OAAA;IAED,sBAAI,gDAAM;;;;;QAAV,UAAW,MAAkB;YACzB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACnC;;;OAAA;IAED,sBAAI,wDAAc;;;;QAAlB;YACI,OAAO,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC;SAC5C;;;OAAA;;;;;;;;IAGD,gEAAyB;;;;;;;IAAzB,UAA0B,IAAY,EAAE,GAAW,EAAE,GAAW,EAAE,MAAc;QAC5E,IAAI,WAAW,CAAC,eAAe,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,SAAS,CAAC,EAAE;YACxD,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC,UAAU,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;SAC3D;KACJ;;;;;IAED,kDAAW;;;;IAAX,UAAY,MAAc;;YAChB,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,IAAI;;YACvC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,IAAI;;YAC3C,MAAM,GAAG,MAAM,KAAK,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,GAAG,EAAE;QAEjE,OAAO,WAAW,CAAC,UAAU,CAAI,IAAI,SAAI,MAAM,SAAI,MAAQ,EAAE,MAAM,CAAC,CAAC;KACxE;;;;;IAEO,gDAAS;;;;IAAjB;QACI,IAAI,CAAC,IAAI,gBAAO,YAAY,CAAC,CAAC;QAC9B,IAAI,CAAC,MAAM,gBAAO,cAAc,CAAC,CAAC;QAClC,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,EAAE,CAAC;KAC/B;;gBA9DJ,UAAU;;IA+DX,mCAAC;CA/DD;;;;;;;;ICnBI,OAAI;IACJ,SAAM;;;;;;;;;ACFV;IAGA;QAGY,yBAAoB,GAAwB,IAAI,OAAO,EAAE,CAAC;QAC1D,wBAAmB,GAA2B,IAAI,OAAO,EAAE,CAAC;KAuBvE;IArBG,sBAAI,4DAAa;;;;QAAjB;YACI,OAAO,IAAI,CAAC,oBAAoB,CAAC,YAAY,EAAE,CAAC;SACnD;;;OAAA;IAED,sBAAI,2DAAY;;;;QAAhB;YACI,OAAO,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,CAAC;SAClD;;;OAAA;;;;;IAED,yDAAa;;;;IAAb,UAAc,KAAiC;QAC3C,QAAQ,KAAK,CAAC,IAAI;YACd,KAAK,OAAO;gBACR,IAAI,CAAC,oBAAoB,CAAC,IAAI,oBAAa,KAAK,GAAC,CAAC;gBAClD,MAAM;YACV,KAAK,SAAS;gBACV,IAAI,CAAC,mBAAmB,CAAC,IAAI,oBAAgB,KAAK,GAAC,CAAC;gBACpD,MAAM;YACV;gBACI,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;SAC7C;KACJ;;gBAzBJ,UAAU;;IA2BX,wCAAC;CA3BD;;;;;;ACHA;;IAwBI,OAAQ,OAAO;IACf,OAAQ,OAAO;;;IAKb,MAAM,GAAG,EAAE;AAEjB;IA4DI,wCAAoB,iBAA+C,EAC/C,YAA+C;QADnE,iBAOC;QAPmB,sBAAiB,GAAjB,iBAAiB,CAA8B;QAC/C,iBAAY,GAAZ,YAAY,CAAmC;QArCnE,aAAQ,GAAG,QAAQ,CAAC;QACpB,mBAAc,GAAG,QAAQ,CAAC,IAAI,CAAC;QAE/B,aAAQ,GAAG,KAAK,CAAC;QAKH,UAAK,GAAG,IAAI,CAAC;QAmBjB,YAAO,GAAG,IAAI,YAAY,EAAU,CAAC;QACrC,WAAM,GAAG,IAAI,YAAY,EAAQ,CAAC;QAMpC,kBAAa,GAAmB,EAAE,CAAC;QAKvC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,EACzD,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,OAAO,KAAK,MAAM,IAAI,KAAI,CAAC,KAAK,GAAA,CAAC,CAAC,CAAC;aACpF,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,KAAK,EAAE,GAAA,CAAC,CAAC,CAAC;KAEvC;IAhCD,sBACI,sDAAU;;;;QAKd;YACI,OAAO,IAAI,CAAC,WAAW,CAAC;SAC3B;;;;;QARD,UACe,GAAW;YACtB,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACtB,IAAI,CAAC,WAAW,GAAG,GAAG,IAAI,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC;SAC1C;;;OAAA;IAMD,sBACI,uDAAW;;;;;QADf,UACgB,IAAY;YACxB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;SAC7B;;;OAAA;IAqBD,sBAAI,mDAAO;;;;QAAX;YACI,OAAO,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC;SAC3D;;;OAAA;IAED,sBAAI,mDAAO;;;;QAAX;YACI,OAAO,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC;SAC3D;;;OAAA;IAED,sBAAI,oDAAQ;;;;QAAZ;YACI,OAAO,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC;SAChE;;;OAAA;IAED,sBAAI,kDAAM;;;;QAAV;YACI,OAAO,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC;SAC9D;;;OAAA;;;;IAED,iDAAQ;;;IAAR;QAAA,iBASC;QARG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,YAAY;aACtD,SAAS,CAAC,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,YAAY,GAAG,IAAI,GAAA,CAAC,CAAC,CAAC;QAElD,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,cAAc;aACxD,SAAS,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,cAAc,GAAG,MAAM,GAAA,CAAC,CAAC,CAAC;QAExD,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,cAAc;aACxD,SAAS,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,cAAc,GAAG,MAAM,GAAA,CAAC,CAAC,CAAC;KAC3D;;;;;;;;;;;;IAMD,sDAAa;;;;;;;IAAb,UAAc,KAA0B;QACpC,IAAI,IAAI,CAAC,eAAe,EAAE;YACtB,MAAM,KAAK,CAAC,0DAA0D,CAAC,CAAC;SAC3E;QACD,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;KAChC;;;;;IAED,qDAAY;;;;IAAZ,UAAa,IAAmB;QAC5B,IAAI,CAAC,iBAAiB,CAAC,IAAI,GAAG,IAAI,CAAC;KACtC;;;;;IAED,uDAAc;;;;IAAd,UAAe,MAAqB;QAChC,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,MAAM,CAAC;KAC1C;;;;;IAED,qDAAY;;;;IAAZ,UAAa,MAAkB;QAC3B,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,MAAM,CAAC;KAC1C;;;;;IAED,uDAAc;;;;IAAd,UAAe,IAAc;QACzB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;KAC9B;;;;IAED,gDAAO;;;IAAP;QACI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QACnE,IAAI,CAAC,KAAK,EAAE,CAAC;KAChB;;;;;IAED,uDAAc;;;;IAAd,UAAe,IAAY;QACvB,IAAI,CAAC,iBAAiB,CAAC,yBAAyB,CAAC,IAAI,qBAAE,IAAI,CAAC,OAAO,uBAAY,IAAI,CAAC,OAAO,IAAY,IAAI,CAAC,MAAM,CAAC,CAAC;KACvH;;;;IAED,6CAAI;;;IAAJ;QACI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC,KAAK,CAAC;KAC9C;;;;IAED,8CAAK;;;IAAL;QACI,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC,KAAK,CAAC;KAC9C;;;;;IAED,sDAAa;;;;IAAb,UAAc,KAAqB;QAC/B,IAAI,KAAK,CAAC,SAAS,KAAK,MAAM,IAAI,KAAK,CAAC,OAAO,KAAK,cAAc,CAAC,KAAK,EAAE;YACtE,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YACtB,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC,IAAI,CAAC;YACpC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;SACtB;KACJ;;;;;IAGD,kDAAS;;;;IADT,UACU,CAAgB;QACtB,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACnC,CAAC,CAAC,eAAe,EAAE,CAAC;KACvB;;;;IAED,oDAAW;;;IAAX;QACI,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAA,YAAY,IAAI,OAAA,YAAY,CAAC,WAAW,EAAE,GAAA,CAAC,CAAC;KAC1E;;gBA7JJ,SAAS,SAAC;oBACP,QAAQ,EAAE,yBAAyB;oBACnC,m6IAAuD;oBAEvD,UAAU,EAAE;wBACR,OAAO,CAAC,YAAY,EAAE;4BAClB,UAAU,CAAC,UAAQ,cAAc,CAAC,KAAO,EAAE;gCACvC,KAAK,CAAC,EAAC,SAAS,EAAE,kBAAkB,EAAC,CAAC;gCACtC,OAAO,CAAC,eAAe,EAAE,KAAK,CAAC,EAAC,SAAS,EAAE,eAAe,EAAC,CAAC,CAAC;6BAChE,CAAC;4BACF,UAAU,CAAI,cAAc,CAAC,KAAK,YAAO,cAAc,CAAC,KAAO,EAAE;gCAC7D,KAAK,CAAC,EAAC,SAAS,EAAE,eAAe,EAAE,OAAO,EAAE,CAAC,EAAC,CAAC;gCAC/C,OAAO,CAAC,eAAe,EAAE,KAAK,CAAC,EAAC,SAAS,EAAE,kBAAkB,EAAE,OAAO,EAAE,CAAC,EAAC,CAAC,CAAC;6BAC/E,CAAC;yBACL,CAAC;qBACL;oBACD,SAAS,EAAE,CAAC,4BAA4B,CAAC;;iBAC5C;;;;gBAlCO,4BAA4B;gBAG5B,iCAAiC;;;gCA4CpC,KAAK;iCACL,KAAK;wBACL,KAAK,SAAC,KAAK;sCACX,KAAK;6BAEL,KAAK;8BAUL,KAAK;0BAML,MAAM;yBACN,MAAM;sCAEN,SAAS,SAAC,cAAc;4BA+FxB,YAAY,SAAC,SAAS,EAAE,CAAC,QAAQ,CAAC;;IASvC,qCAAC;CA9JD;;;;;;AChCA;AAGA;IAAA;KAGC;;gBAHA,SAAS,SAAC,EAAC,QAAQ,EAAE,mCAAmC,EAAC;;IAG1D,+CAAC;CAHD;;;;;;ACHA;IAIA;KA6BC;IAnBG,sBACI,0DAAQ;;;;QADZ;YAEI,OAAO,IAAI,CAAC,SAAS,KAAK,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;SACnF;;;;;QAED,UAAa,KAAc;YACvB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;SAC1B;;;OAJA;;;;;IAUD,mDAAI;;;;IAAJ,UAAK,KAAK;QACN,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;YACvB,KAAK,CAAC,eAAe,EAAE,CAAC;SAC3B;KACJ;;gBA5BJ,SAAS,SAAC;oBACP,QAAQ,EAAE,gCAAgC;oBAC1C,6xBAA4D;;iBAE/D;;;6BAII,KAAK,SAAC,KAAK;2BAEX,KAAK;6BAWL,YAAY,SAAC,wCAAwC;;IAQ1D,2CAAC;CA7BD;;;;;;ACJA;IAOM,cAAc,GAAG;IACnB,OAAO,EAAE,iBAAiB;IAC1B,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,mBAAmB,GAAA,CAAC;IAClD,KAAK,EAAE,IAAI;CACd;AAED;IAsFI,6BAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAlElC,YAAO,GAAG,EAAE,CAAC;QAoDb,WAAM,GAAG,EAAE,CAAC;QAUZ,4BAAuB,GAAmB,EAAE,CAAC;QACrD,cAAS,GAAG,eAAQ,CAAC;QACb,aAAQ,GAAyB,eAAQ,CAAC;KAGjD;IA5ED,sBACI,uCAAM;;;;QAIV;YACI,OAAO,IAAI,CAAC,OAAO,CAAC;SACvB;;;;;QAPD,UACW,KAAa;YACpB,IAAI,CAAC,OAAO,GAAG,KAAK,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;SACzC;;;OAAA;IAQD,sBACI,oCAAG;;;;QAQP;YACI,OAAO,IAAI,CAAC,IAAI,CAAC;SACpB;;;;;QAXD,UACQ,KAAsB;YAC1B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;gBAC3B,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;gBACnD,OAAO;aACV;YACD,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;SACrB;;;OAAA;IAQD,sBACI,oCAAG;;;;QAQP;YACI,OAAO,IAAI,CAAC,IAAI,CAAC;SACpB;;;;;QAXD,UACQ,KAAsB;YAC1B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;gBAC3B,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;gBACnD,OAAO;aACV;YACD,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;SACrB;;;OAAA;IAQD,sBACI,sCAAK;;;;QAeT;YACI,OAAO,IAAI,CAAC,MAAM,CAAC;SACtB;;;;;QAlBD,UACU,KAAa;YACnB,IAAI,CAAC,KAAK,EAAE;gBACR,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;gBACjB,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBACxB,OAAO;aACV;;gBACK,IAAI,GAAG,WAAW,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC;YACxD,IAAI,WAAW,CAAC,eAAe,CAAC,IAAI,qBAAU,IAAI,CAAC,IAAI,uBAAU,IAAI,CAAC,IAAI,IAAE,SAAS,CAAC,EAAE;gBACpF,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;gBACnB,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBACxB,OAAO;aACV;YACD,OAAO,CAAC,IAAI,CAAC,+CAA+C,CAAC,CAAC;SACjE;;;OAAA;IAQD,sBACI,2CAAU;;;;;QADd,UACe,MAAsC;YACjD,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;SACnC;;;OAAA;IAYD,sBAAY,4CAAW;;;;;;QAAvB,UAAwB,IAAY;YAChC,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;SACzC;;;OAAA;;;;;IAED,qCAAO;;;;IAAP,UAAQ,KAAa;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;KACxB;;;;;IAED,yCAAW;;;;IAAX,UAAY,OAAsB;QAC9B,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC,YAAY,EAAE;YACnD,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC;SACpD;KACJ;;;;;IAGD,qCAAO;;;;IADP,UACQ,KAAK;QACT,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACpB,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;YACxB,KAAK,CAAC,eAAe,EAAE,CAAC;SAC3B;KACJ;;;;;IAED,wCAAU;;;;IAAV,UAAW,KAAa;QACpB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;KAC5B;;;;;IAED,8CAAgB;;;;IAAhB,UAAiB,EAAwB;QACrC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;KACtB;;;;;IAED,+CAAiB;;;;IAAjB,UAAkB,EAAc;QAC5B,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;KACvB;;;;;IAED,8CAAgB;;;;IAAhB,UAAiB,UAAmB;QAChC,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;KAC9B;;;;IAED,yCAAW;;;IAAX;QACI,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,WAAW,EAAE,GAAA,CAAC,CAAC;KAC9D;;;;;;IAEO,gDAAkB;;;;;IAA1B,UAA2B,MAAsC;QAAjE,iBAeC;QAdG,IAAI,MAAM,EAAE;YACR,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;YAC1B,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YACrC,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,SAAS,CAAC,UAAC,IAAY;gBAC9E,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC;gBAClB,KAAI,CAAC,QAAQ,CAAC,KAAI,CAAC,MAAM,CAAC,CAAC;gBAC3B,KAAI,CAAC,SAAS,EAAE,CAAC;aACpB,CAAC,CAAC,CAAC;YACJ,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAC7B,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,WAAW,GAAG,KAAI,CAAC,MAAM,GAAA,CAAC,CAAC,CAAC;SAChF;aAAM;YACH,MAAM,IAAI,KAAK,CAAC,gDAAgD;gBAC5D,wEAAwE,CAAC,CAAC;SACjF;KACJ;;;;;IAEO,8CAAgB;;;;IAAxB;QACI,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;KACpD;;gBAxJJ,SAAS,SAAC;oBACP,QAAQ,EAAE,iBAAiB;oBAC3B,SAAS,EAAE,CAAC,cAAc,CAAC;oBAC3B,IAAI,EAAE;wBACF,YAAY,EAAE,UAAU;wBACxB,SAAS,EAAE,8BAA8B;wBACzC,QAAQ,EAAE,aAAa;qBAC1B;iBACJ;;;;gBArBkB,UAAU;;;yBAwBxB,KAAK;sBAWL,KAAK;sBAeL,KAAK;wBAeL,KAAK;6BAsBL,KAAK,SAAC,eAAe;2BAMrB,KAAK;+BACL,KAAK;0BAuBL,YAAY,SAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;;IAkDrC,0BAAC;CA1JD;;;;;;ACbA;IAUI,6CAAY,UAAsB;QAC9B,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,aAAa,CAAC;KAC3C;;;;IAED,6DAAe;;;IAAf;QACI,IAAI,IAAI,CAAC,KAAK,EAAE;YACZ,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC7B;KACJ;;;;;;IAEO,sDAAQ;;;;;IAAhB,UAAiB,KAAK;QAClB,KAAK,IAAI,GAAG,IAAI,KAAK,EAAE;YACnB,IAAI,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;gBAC3B,IAAI,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,QAAQ,EAAE;oBAChC,KAAK,IAAI,IAAI,IAAI,KAAK,EAAE;wBACpB,IAAI,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;4BAC5B,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,OAAK,eAAe,CAAC,IAAI,CAAG,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;yBAC7E;qBACJ;oBACD,OAAM;iBACT;gBACD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAA;aAC5B;SAEJ;KACJ;;gBAhCJ,SAAS,SAAC,EAAC,QAAQ,EAAE,8BAA8B,EAAC;;;;gBAHnB,UAAU;;;wBAMvC,KAAK,SAAC,4BAA4B;;IA8BvC,0CAAC;CAjCD,IAiCC;;;;;AAED,SAAS,eAAe,CAAC,KAAK;IAC1B,OAAO,KAAK,CAAC,OAAO,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;CAClE;;;;;;;IClCKA,QAAM,GAAGC,MAAO;AAEtB,IAAiB,cAAc,CAyD9B;AAzDD,WAAiB,cAAc;;;;;IAE3B,SAAgB,QAAQ,CAAC,MAAc;QACnC,OAAO,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,CAAC;;gBAC5B,SAAS,GAAG,EAAE;;gBACd,IAAI,GAAG,CAAC,GAAG,CAAC;;gBACZ,KAAK,GAAG,SAAS,GAAG,IAAI;YAC9B,OAAO,EAAC,IAAI,EAAE,IAAI,KAAK,EAAE,GAAG,CAAC,GAAG,IAAI,EAAE,KAAK,OAAA,EAAC,CAAC;SAChD,CAAC,CAAC;KACN;IAPe,uBAAQ,WAOvB,CAAA;;;;;;IAED,SAAgB,YAAY,CAAC,KAAsB,EAAE,MAA0B;QAC3E,IAAI,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,GAAG,EAAE;YAE1B,OAAO,KAAK,CAAC,GAAG,CAAC,UAAA,KAAK;;oBACZ,IAAI,GAAG,MAAM,CAAC,MAAM,KAAK,EAAE,GAAG,KAAK,CAAC,IAAI,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC;;oBAC5G,WAAW,GAAGD,QAAM,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC;gBAElE,oBACO,KAAK,IACR,QAAQ,EAAE,CAAC,WAAW,CAAC,eAAe,CAAC,WAAW,EAAE,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,IACtF;aACL,CAAC,CAAC;SACN;QACD,OAAO,KAAK,CAAC;KAChB;IAde,2BAAY,eAc3B,CAAA;;;;;IAED,SAAgB,UAAU,CAAC,GAAO;QAAP,oBAAA,EAAA,OAAO;;YACxB,YAAY,GAAG,EAAE;;YACjB,SAAS,GAAG,GAAG,GAAG,YAAY;;YAC9B,OAAO,GAAG,EAAE;QAElB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,EAAE,CAAC,EAAE,EAAE;;gBAC7B,KAAK,GAAG,SAAS,GAAG,CAAC;YAC3B,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,EAAE;gBACf,OAAO,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,GAAG,GAAG,EAAC,CAAC,CAAC;aAC7D;SACJ;QACD,OAAO,OAAO,CAAC;KAClB;IAZe,yBAAU,aAYzB,CAAA;;;;;;;IAED,SAAgB,cAAc,CAAC,OAAwB,EAAE,YAAoB,EAAE,MAA0B;QACrG,IAAI,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,GAAG,EAAE;;gBAEpB,MAAI,GAAG,WAAW,CAAC,UAAU,CAAC,YAAY,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC;YAE/E,OAAO,OAAO,CAAC,GAAG,CAAC,UAAA,KAAK;;oBACd,WAAW,GAAGA,QAAM,EAAE,CAAC,IAAI,CAAC,MAAI,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC;gBAErF,oBACO,KAAK,IACR,QAAQ,EAAE,CAAC,WAAW,CAAC,eAAe,CAAC,WAAW,EAAE,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,IACxF;aACL,CAAC,CAAC;SACN;QACD,OAAO,OAAO,CAAC;KAClB;IAfe,6BAAc,iBAe7B,CAAA;CACJ,EAzDgB,cAAc,KAAd,cAAc,QAyD9B;;;;;;ACjED;IAkBI,wCAAsB,MAAc;QAL1B,eAAU,GAAG,IAAI,YAAY,EAAiB,CAAC;QAC/C,iBAAY,GAAG,IAAI,YAAY,EAAQ,CAAC;QAElD,cAAS,GAAoB,EAAE,CAAC;QAG5B,IAAI,CAAC,SAAS,GAAG,cAAc,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;KACpD;;+BAZA,KAAK;0BACL,KAAK;0BACL,KAAK;yBACL,KAAK;6BAEL,MAAM;+BACN,MAAM;;IAOX,qCAAC;CAfD;;;;;;;ICG+DG,6DAA8B;IAEzF;eACI,kBAAM,EAAE,CAAC;KACZ;;;;IAED,sEAAkB;;;IAAlB;QACI,IAAI,CAAC,SAAS,GAAG,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE;YACzD,GAAG,EAAE,IAAI,CAAC,OAAO;YACjB,GAAG,EAAE,IAAI,CAAC,OAAO;YACjB,MAAM,EAAE,IAAI,CAAC,MAAM;SACtB,CAAC,CAAC;KACN;;gBAjBJ,SAAS,SAAC;oBACP,QAAQ,EAAE,uCAAuC;oBACjD,4SAAmE;iBACtE;;;;IAeD,gDAAC;CAAA,CAb8D,8BAA8B;;;;;;;ICE9BA,6DAA8B;IAIzF;eACI,kBAAM,EAAE,CAAC;KACZ;;;;;IAED,+DAAW;;;;IAAX,UAAY,OAAsB;QAC9B,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC,YAAY,EAAE;YACrD,IAAI,CAAC,SAAS,GAAG,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE;gBACzD,GAAG,EAAE,IAAI,CAAC,OAAO;gBACjB,GAAG,EAAE,IAAI,CAAC,OAAO;gBACjB,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,MAAM,EAAE,IAAI,CAAC,MAAM;aACtB,CAAC,CAAC;SACN;KACJ;;gBAtBJ,SAAS,SAAC;oBACP,QAAQ,EAAE,uCAAuC;oBACjD,uPAAmE;iBACtE;;;;;yBAII,KAAK;;IAgBV,gDAAC;CAAA,CAlB8D,8BAA8B;;;;;;ACX7F;IAQA;QAMI,gBAAW,GAAoB,EAAE,CAAC;QAClC,aAAQ,GAAG,QAAQ,CAAC;QAUV,iBAAY,GAAG,IAAI,YAAY,EAAiB,CAAC;KAa9D;;;;;IAXG,+DAAW;;;;IAAX,UAAY,OAAsB;QAC9B,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC,YAAY,EAAE;;gBAC/C,OAAO,GAAG,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC;YAC1D,IAAI,CAAC,WAAW,GAAG,cAAc,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,EAAE;gBACzE,GAAG,EAAE,IAAI,CAAC,OAAO;gBACjB,GAAG,EAAE,IAAI,CAAC,OAAO;gBACjB,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,MAAM,EAAE,IAAI,CAAC,MAAM;aACtB,CAAC,CAAC;SACN;KACJ;;gBA7BJ,SAAS,SAAC;oBACP,QAAQ,EAAE,sCAAsC;oBAChD,8SAAoE;iBACvE;;;iCAMI,KAAK;+BACL,KAAK;yBACL,KAAK;0BACL,KAAK;0BACL,KAAK;yBACL,KAAK;6BACL,KAAK;+BAEL,MAAM;;IAaX,gDAAC;CA9BD;;;;;;ACRA;IAgBM,iBAAiB,GAAG;IACtB,KAAK,EAAE;QACH,MAAM,EAAE,MAAM;QACd,GAAG,EAAE,kBAAkB;KAC1B;IACD,KAAK,EAAE;QACH,MAAM,EAAE,OAAO;QACf,GAAG,EAAE,mBAAmB;KAC3B;CACJ;AAED;IAAA;QAOI,aAAQ,GAAG,QAAQ,CAAC;QAGpB,uBAAkB,GAAG,EAAE,CAAC;QAQd,eAAU,GAAG,IAAI,YAAY,EAAiB,CAAC;QAC/C,iBAAY,GAAG,IAAI,YAAY,EAAQ,CAAC;KAsJrD;;;;IA7IG,4DAAe;;;IAAf;QACI,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC5B,IAAI,CAAC,cAAc,EAAE,CAAC;KACzB;;;;;IAED,wDAAW;;;;IAAX,UAAY,OAAsB;QAAlC,iBAgBC;;YAfS,eAAe,GAAG,OAAO,CAAC,UAAU,CAAC;;YACrC,mBAAmB,GAAG,OAAO,CAAC,cAAc,CAAC;QAEnD,IAAI,CAAC,eAAe,IAAI,eAAe,CAAC,YAAY;gBAC5C,mBAAmB,IAAI,mBAAmB,CAAC,YAAY,CAAC,EAAE;;YAE9D,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,IAAI,KAAK,KAAI,CAAC,YAAY,CAAC,IAAI,GAAA,CAAC,CAAC;SACxF;QACD,IAAI,mBAAmB,IAAI,mBAAmB,CAAC,YAAY,EAAE;YACzD,IAAI,CAAC,oBAAoB,EAAE,CAAC;SAC/B;QACD,IAAI,eAAe,IAAI,eAAe,CAAC,YAAY,EAAE;;YAEjD,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,mBAAmB,EAAE,GAAA,CAAC,CAAC;SAChD;KACJ;;;;;;IAGD,wDAAW;;;;;IAAX,UAAY,CAAC,EAAE,IAAmB;QAC9B,OAAO,IAAI,CAAC,IAAI,CAAC;KACpB;;;;;IAGD,wDAAW;;;;IADX,UACY,CAA0B;QAClC,CAAC,CAAC,cAAc,EAAE,CAAC;QACnB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;KACzB;;;;;IAMD,uDAAU;;;;IAJV,UAIW,CAAqB;QAE5B,IAAI,CAAC,IAAI,CAAC,SAAS,KAAK,CAAC,YAAY,UAAU,IAAI,CAAC,CAAC,IAAI,KAAK,OAAO,CAAC,EAAE;YACpE,OAAO;SACV;;YACK,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,qBAAqB,EAAE;;;YAGrE,OAAO,GAAG,cAAc,CAAC,IAAI,GAAG,cAAc,CAAC,KAAK,GAAG,CAAC;;YACxD,OAAO,GAAG,cAAc,CAAC,GAAG,GAAG,cAAc,CAAC,MAAM,GAAG,CAAC;;;YAExD,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,GAAG,OAAO,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE;;;YAErG,WAAW,GAAG,iBAAiB,CAAC,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,EAAE,UAAU,CAAC;;;YAEnF,kBAAkB,GAAG,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC;;;YAEjG,SAAS,GAAG,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,MAAM,GAAG,CAAC,GAAG,EAAE;;YAClD,YAAY,GAAG,kBAAkB;cACjC,UAAU,CAAC,WAAW,EAAE,SAAS,CAAC,GAAG,GAAG;cACxC,UAAU,CAAC,WAAW,EAAE,SAAS,CAAC;;YAElC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,KAAK,KAAK,YAAY,GAAA,CAAC;QAE1E,IAAI,YAAY,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE;YACxC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;;YAGnC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACjB,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;aAC5B;SACJ;KAEJ;;;;;IAGD,sDAAS;;;;IADT,UACU,CAA0B;QAChC,CAAC,CAAC,cAAc,EAAE,CAAC;QACnB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;KAC1B;;;;;IAED,2DAAc;;;;IAAd,UAAe,IAAY;QACvB,OAAO,CAAC,IAAI,KAAK,IAAI,CAAC,YAAY,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,mBAAmB,CAAC;KACzE;;;;;IAED,6DAAgB;;;;IAAhB,UAAiB,MAAc;QAC3B,OAAO,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,KAAK,MAAM,MAAM,MAAM,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,mBAAmB,CAAC;KACxH;;;;IAED,wDAAW;;;IAAX;QACI,IAAI,CAAC,iBAAiB,EAAE,CAAC;KAC5B;;;;;IAEO,2DAAc;;;;IAAtB;QACI,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEjD,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,gBAAgB,CAAC,YAAY,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACpF,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;KACnF;;;;;IAEO,8DAAiB;;;;IAAzB;QACI,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,mBAAmB,CAAC,YAAY,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACvF,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;KACtF;;;;;IAEO,iEAAoB;;;;IAA5B;QACI,IAAI,IAAI,CAAC,MAAM,KAAK,EAAE,EAAE;YACpB,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,KAAK,CAAC,EAAE;gBAC7D,IAAI,CAAC,iBAAiB,EAAE,CAAC;aAC5B;iBAAM;gBACH,IAAI,CAAC,iBAAiB,EAAE,CAAC;aAC5B;SACJ;QAED,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,SAAS,GAAG,YAAU,IAAI,CAAC,YAAY,CAAC,KAAK,SAAM,CAAC;KAC1F;;;;;IAEO,gEAAmB;;;;IAA3B;QAAA,iBASC;;YARS,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,GAAA,CAAC;QACpF,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,QAAQ,GAAA,CAAC,CAAC;QAEtE,IAAI,CAAC,WAAW,IAAI,WAAW,CAAC,QAAQ,KAAK,CAAC,IAAI,CAAC,mBAAmB,EAAE;;gBAC9D,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,IAAI,CAAC,QAAQ,GAAA,CAAC;YAEhE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;SACvC;KACJ;;;;;;;;;IAEO,6DAAgB;;;;;;;;IAAxB,UAAyB,EAAU,EAAE,EAAU,EAAE,CAAS,EAAE,CAAS;;QAEjE,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC;KACzF;;;;;IAEO,8DAAiB;;;;IAAzB;QACI,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,GAAG,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC;QAC3E,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,GAAG,iBAAiB,CAAC,KAAK,CAAC,GAAG,CAAC;KACxE;;;;;IAEO,8DAAiB;;;;IAAzB;QACI,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,GAAG,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC;QAC3E,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,GAAG,iBAAiB,CAAC,KAAK,CAAC,GAAG,CAAC;KACxE;;gBAxKJ,SAAS,SAAC;oBACP,QAAQ,EAAE,8BAA8B;oBACxC,0sEAA4D;;iBAE/D;;;2BAQI,KAAK;+BACL,KAAK;uBACL,KAAK;yBACL,KAAK;6BACL,KAAK;6BAEL,MAAM;+BACN,MAAM;4BAEN,SAAS,SAAC,WAAW;4BACrB,SAAS,SAAC,WAAW;8BAkCrB,YAAY,SAAC,WAAW,EAAE,CAAC,QAAQ,CAAC;6BAMpC,YAAY,SAAC,OAAO,EAAE,CAAC,QAAQ,CAAC,cAChC,YAAY,SAAC,WAAW,EAAE,CAAC,0BAA0B,CAAC,cACtD,YAAY,SAAC,UAAU,EAAE,CAAC,0BAA0B,CAAC,cACrD,YAAY,SAAC,WAAW,EAAE,CAAC,QAAQ,CAAC;4BAoCpC,YAAY,SAAC,SAAS,EAAE,CAAC,QAAQ,CAAC;;IAoEvC,yCAAC;CAzKD,IAyKC;;;;;;AAED,SAAS,UAAU,CAAC,KAAa,EAAE,IAAY;IAC3C,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;CAC1C;;;;;;;;;AAED,SAAS,iBAAiB,CAAC,EAAU,EAAE,EAAU,EAAE,CAAS,EAAE,CAAS,EAAE,YAAoB;IACzF,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE,EAAE;QACnB,OAAO,GAAG,GAAG,YAAY,CAAC;KAC7B;SAAM,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE;QACzB,OAAO,GAAG,GAAG,YAAY,CAAC;KAC7B;SAAM,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE;QACzB,OAAO,GAAG,GAAG,YAAY,CAAC;KAC7B;SAAM;QACH,OAAO,YAAY,CAAC;KACvB;CACJ;;;;;;ACpND;IAEA;KAMC;;gBANA,SAAS,SAAC;oBACP,QAAQ,EAAE,gCAAgC;oBAC1C,6HAA8D;;iBAEjE;;IAED,2CAAC;CAND;;;;;;ACFA;IAOA;QAQI,aAAQ,GAAG,QAAQ,CAAC;QAeV,kBAAa,GAAG,IAAI,YAAY,EAAc,CAAC;QAC/C,oBAAe,GAAG,IAAI,YAAY,EAAY,CAAC;QAC/C,gBAAW,GAAG,IAAI,YAAY,EAAiB,CAAC;QAChD,kBAAa,GAAG,IAAI,YAAY,EAAiB,CAAC;KA0C/D;;;;;IAxCG,wDAAW;;;;IAAX,UAAY,OAAsB;QAC9B,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC,YAAY;eAChD,OAAO,CAAC,QAAQ,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC,YAAY,EAAE;;gBAClD,KAAK,GAAG,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;YAElD,IAAI,CAAC,KAAK,GAAG,cAAc,CAAC,YAAY,CAAC,KAAK,EAAE;gBAC5C,GAAG,EAAE,IAAI,CAAC,OAAO;gBACjB,GAAG,EAAE,IAAI,CAAC,OAAO;gBACjB,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,MAAM,EAAE,IAAI,CAAC,MAAM;aACtB,CAAC,CAAC;SACN;QACD,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC,YAAY;eAChD,OAAO,CAAC,MAAM,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,YAAY,EAAE;;gBAC9C,OAAO,GAAG,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC;YAE1D,IAAI,CAAC,OAAO,GAAG,cAAc,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE;gBAC9D,GAAG,EAAE,IAAI,CAAC,OAAO;gBACjB,GAAG,EAAE,IAAI,CAAC,OAAO;gBACjB,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,MAAM,EAAE,IAAI,CAAC,MAAM;aACtB,CAAC,CAAC;SACN;KACJ;;;;;IAED,2DAAc;;;;IAAd,UAAe,IAAc;QACzB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACnC;;;;;IAED,yDAAY;;;;IAAZ,UAAa,MAAkB;QAC3B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACnC;;;;;IAED,uDAAU;;;;IAAV,UAAW,IAAmB;QAC1B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC/B;;;;;IAED,yDAAY;;;;IAAZ,UAAa,MAAqB;QAC9B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACnC;;gBAnEJ,SAAS,SAAC;oBACP,QAAQ,EAAE,8BAA8B;oBACxC,0wDAA0D;oBAE1D,eAAe,EAAE,uBAAuB,CAAC,MAAM;;iBAClD;;;uBAQI,KAAK;yBACL,KAAK;yBACL,KAAK;yBACL,KAAK;iCACL,KAAK;0BACL,KAAK;0BACL,KAAK;6BACL,KAAK;6BACL,KAAK;gCAEL,MAAM;kCACN,MAAM;8BACN,MAAM;gCACN,MAAM;;IA0CX,yCAAC;CApED;;;;;;ACPA;IAIA;KAmBC;;;;;;IAdG,qCAAS;;;;;IAAT,UAAU,IAAY,EAAE,QAAkB;QACtC,IAAI,IAAI,KAAK,SAAS,EAAE;YACpB,OAAO,IAAI,CAAC;SACf;QACD,QAAQ,QAAQ;YACZ,KAAK,QAAQ,CAAC,IAAI;gBACd,OAAOC,GAAU,CAAC,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACvD,KAAK,QAAQ,CAAC,MAAM;gBAChB,OAAOA,GAAU,CAAC,IAAI,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACrD;gBACI,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;SAC5C;KACJ;;gBAjBJ,IAAI,SAAC;oBACF,IAAI,EAAE,eAAe;iBACxB;;IAiBD,wBAAC;CAnBD;;;;;;ACJA;IAKA;QAec,oBAAe,GAAG,IAAI,YAAY,EAAY,CAAC;QAC/C,gBAAW,GAAG,IAAI,YAAY,EAAiB,CAAC;KAoE7D;IAlEG,sBAAY,mEAAY;;;;;QAAxB;YAAA,iBAIC;YAHG,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE;gBACb,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,CAAC,KAAI,CAAC,IAAI,GAAA,CAAC,CAAC;aACzD;SACJ;;;OAAA;;;;;IAED,+DAAW;;;;IAAX,UAAY,OAAsB;QAC9B,IAAI,OAAO,CAAC,MAAM,CAAC,KAAK,OAAO,CAAC,MAAM,CAAC,CAAC,YAAY,KAAK,SAAS,CAAC,EAAE;YACjE,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE;gBACjD,OAAO;aACV;YACD,IAAI,CAAC,IAAI,GAAG,IAAI,iBAAiB,EAAE,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAA;SAC9F;KACJ;;;;;;IAED,6EAAyB;;;;;IAAzB,UAA0B,KAAiB,EAAE,IAAc;QACvD,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC;QAC9B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACnC;;;;IAED,8DAAU;;;IAAV;;YACU,IAAI,GAAG,IAAI,CAAC,YAAY;QAC9B,IAAI,IAAI,EAAE;YACN,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC;SACjC;KACJ;;;;IAED,8DAAU;;;IAAV;QACI,IAAI,IAAI,CAAC,UAAU,EAAE;;gBACX,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,YAAY;YAC3C,IAAI,CAAC,IAAI,GAAG,IAAI,iBAAiB,EAAE,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;SACvE;KACJ;;;;;IAED,6DAAS;;;;IAAT,UAAU,CAAgB;;YAChB,IAAI,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC;QAG3C,IAAI,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,KAAK,sBAAsB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE;YAChF,CAAC,CAAC,cAAc,EAAE,CAAC;SACtB;QAED,IAAI,cAAc,CAAC,CAAC,CAAC,EAAE;YACnB,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;SACrC;KACJ;;;;;;IAEO,qEAAiB;;;;;IAAzB,UAA0B,OAAe;;YAC/B,QAAQ,GAAG,EAAE;;YACb,UAAU,GAAG,EAAE;;YACjB,IAAY;QAEhB,IAAI,OAAO,KAAK,QAAQ,EAAE;YACtB,IAAI,GAAG,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;SACjC;aAAM,IAAI,OAAO,KAAK,UAAU,EAAE;YAC/B,IAAI,GAAG,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;SACjC;QAED,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE;YACzC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACjB,IAAI,CAAC,UAAU,EAAE,CAAC;SACrB;KACJ;;gBAlFJ,SAAS,SAAC;oBACP,QAAQ,EAAE,sCAAsC;oBAChD,keAAkE;;iBAErE;;;2BAKI,KAAK;2BACL,KAAK;uBACL,KAAK;2BACL,KAAK;6BACL,KAAK;kCAEL,MAAM;8BACN,MAAM;;IAoEX,gDAAC;CApFD,IAoFC;;;;;AAED,SAAS,cAAc,CAAC,CAAgB;;IAEpC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,KAAK,CAAC,CAAC,OAAO,GAAA,CAAC;;SAE5C,CAAC,CAAC,OAAO,IAAI,EAAE,KAAK,CAAC,CAAC,OAAO,KAAK,IAAI,IAAI,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC;;SAE9D,CAAC,CAAC,OAAO,IAAI,EAAE,KAAK,CAAC,CAAC,OAAO,KAAK,IAAI,IAAI,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC;;SAE9D,CAAC,CAAC,OAAO,IAAI,EAAE,KAAK,CAAC,CAAC,OAAO,KAAK,IAAI,IAAI,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC;;SAE9D,CAAC,CAAC,OAAO,IAAI,EAAE,IAAI,CAAC,CAAC,OAAO,IAAI,EAAE,CAAC,EAAE;QAEtC,OAAO,IAAI,CAAC;KACf;IACD,OAAO,EAAE,CAAC,CAAC,CAAC,OAAO,GAAG,EAAE,IAAI,CAAC,CAAC,OAAO,GAAG,EAAE,MAAM,CAAC,CAAC,OAAO,GAAG,EAAE,IAAI,CAAC,CAAC,OAAO,GAAG,GAAG,CAAC,CAAC,CAAA;CACtF;;;;;;;AAED,SAAS,sBAAsB,CAAC,WAAmB,EAAE,QAAgB,EAAE,QAAyB;;QACtF,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;IAEpC,IAAI,QAAQ,EAAE;;YACJ,IAAI,GAAG,WAAW,GAAG,QAAQ;QACnC,OAAO,iBAAiB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;KAC5C;CACJ;;;;;;AAED,SAAS,iBAAiB,CAAC,IAAY,EAAE,QAAyB;;QACxD,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,IAAI,KAAK,CAAC,IAAI,GAAA,CAAC;IACjE,OAAO,CAAC,YAAY,KAAK,YAAY,IAAI,YAAY,CAAC,QAAQ,CAAC,CAAC;CACnE;;;;;;ACxHD;IAQA;QAmBI,eAAU,GAAG,UAAU,CAAC;QACxB,sBAAiB,GAAG,IAAI,CAAC;QAWf,kBAAa,GAAG,IAAI,YAAY,EAAc,CAAC;KAsC5D;;;;;IApCG,2DAAY;;;;IAAZ,UAAa,MAAkB;QAC3B,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;QAC9D,IAAI,IAAI,CAAC,iBAAiB,EAAE;YACxB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACnC;KACJ;;;;IAED,4DAAa;;;IAAb;QACI,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;KACjC;;;;;;IAEO,sEAAuB;;;;;IAA/B,UAAgC,MAAkB;;YACxC,IAAI,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC;QACjD,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,QAAQ,GAAA,CAAC,CAAC;KACvC;;;;;;IAEO,sEAAuB;;;;;IAA/B,UAAgC,MAAkB;QAC9C,QAAQ,IAAI,CAAC,cAAc;YACvB,KAAK,QAAQ,CAAC,IAAI;gBACd,OAAO,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE;oBAC3C,GAAG,EAAE,IAAI,CAAC,OAAO;oBACjB,GAAG,EAAE,IAAI,CAAC,OAAO;oBACjB,MAAM,EAAE,IAAI,CAAC,MAAM;oBACnB,MAAM,QAAA;iBACT,CAAC,CAAC;YACP,KAAK,QAAQ,CAAC,MAAM;gBAChB,OAAO,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,YAAY,EAAE;oBACnE,GAAG,EAAE,IAAI,CAAC,OAAO;oBACjB,GAAG,EAAE,IAAI,CAAC,OAAO;oBACjB,MAAM,EAAE,IAAI,CAAC,MAAM;oBACnB,MAAM,QAAA;iBACT,CAAC,CAAC;YACP;gBACI,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;SAC3C;KACJ;;gBApEJ,SAAS,SAAC;oBACP,QAAQ,EAAE,gCAAgC;oBAC1C,2yBAA4D;oBAE5D,UAAU,EAAE;wBACR,OAAO,CAAC,YAAY,EAAE;4BAClB,UAAU,CAAC,QAAQ,EAAE;gCACjB,KAAK,CAAC,EAAC,SAAS,EAAE,UAAU,EAAC,CAAC;gCAC9B,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,EAAC,SAAS,EAAE,UAAU,EAAC,CAAC,CAAC;gCAC9C,QAAQ,CAAC;oCACL,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,EAAC,OAAO,EAAE,CAAC,EAAC,CAAC,CAAC;oCAClC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,EAAC,OAAO,EAAE,CAAC,EAAC,CAAC,CAAC;iCACtC,CAAC;6BACL,CAAC;yBACL,CAAC;qBACL;;iBACJ;;;iCAMI,KAAK;yBACL,KAAK;iCACL,KAAK;wBACL,KAAK;0BACL,KAAK;0BACL,KAAK;0BACL,KAAK;+BACL,KAAK;gCAEL,MAAM;;IAsCX,2CAAC;CArED;;;;;;ACRA;IAQI,4BAAoB,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;KAC7C;;;;;IAED,sCAAS;;;;IAAT,UAAU,KAAa;QACnB,IAAI,CAAC,KAAK,EAAE;YACR,OAAO,KAAK,CAAC;SAChB;QACD,OAAO,IAAI,CAAC,YAAY,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;KAC5D;;gBAbJ,IAAI,SAAC;oBACF,IAAI,EAAE,gBAAgB;iBACzB;;;;gBAJO,YAAY;;IAiBpB,yBAAC;CAfD;;;;;;ACHA;IAQI,0BAAoB,YAA+C;QAA/C,iBAAY,GAAZ,YAAY,CAAmC;KAClE;;;;;IAID,kCAAO;;;;IADP,UACQ,CAAa;QACjB,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACnC,CAAC,CAAC,cAAc,EAAE,CAAC;KACtB;;gBAbJ,SAAS,SAAC;oBACP,QAAQ,EAAE,WAAW;iBACxB;;;;gBAJO,iCAAiC;;;0BAWpC,YAAY,SAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;;IAMrC,uBAAC;CAfD;;;;;;ACHA;IAEA;KAaC;;;;;;IARG,wCAAS;;;;;IAAT,UAAU,MAAc,EAAE,GAAO;QAAP,oBAAA,EAAA,OAAO;QAC7B,IAAI,CAAC,MAAM,EAAE;YACT,OAAO,MAAM,CAAC;SACjB;QAED,OAAO,MAAM,GAAG,GAAG,KAAK,CAAC,GAAG,MAAM,GAAG,EAAE,CAAC;KAC3C;;gBAXJ,IAAI,SAAC;oBACF,IAAI,EAAE,kBAAkB;iBAC3B;;IAWD,2BAAC;CAbD;;;;;;ACFA;IAYI,4BAAoB,OAAmB,EAAwC,QAAa;QAAxE,YAAO,GAAP,OAAO,CAAY;QAAwC,aAAQ,GAAR,QAAQ,CAAK;QACxF,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC;KACpD;;;;IAED,wCAAW;;;IAAX;QAAA,iBAKC;QAJG,IAAI,IAAI,CAAC,aAAa,EAAE;;YAEpB,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,EAAE,GAAA,CAAC,CAAC;SACxD;KACJ;;;;IAED,wCAAW;;;IAAX;QAAA,iBAGC;;QADG,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,aAAa,CAAC,KAAK,EAAE,GAAA,CAAC,CAAC;KAChD;;gBAvBJ,SAAS,SAAC;oBACP,QAAQ,EAAE,uBAAuB;iBACpC;;;;gBALkB,UAAU;gDAYiB,QAAQ,YAAI,MAAM,SAAC,QAAQ;;;gCAJpE,KAAK,SAAC,qBAAqB;;IAmBhC,yBAAC;CAxBD;;;;;;ACHA;IA0BA;KAwCC;;;;IANU,mCAAO;;;IAAd;QACI,OAAO;YACH,QAAQ,EAAE,2BAA2B;YACrC,SAAS,EAAE,CAAC,4BAA4B,EAAE,iCAAiC,CAAC;SAC/E,CAAC;KACL;;gBAvCJ,QAAQ,SAAC;oBACN,OAAO,EAAE;wBACL,YAAY;wBACZ,WAAW;qBACd;oBACD,OAAO,EAAE;wBACL,8BAA8B;wBAC9B,oCAAoC;wBACpC,mBAAmB;wBACnB,wCAAwC;wBACxC,mCAAmC;qBACtC;oBACD,YAAY,EAAE;wBACV,8BAA8B;wBAC9B,yCAAyC;wBACzC,yCAAyC;wBACzC,yCAAyC;wBACzC,kCAAkC;wBAClC,oCAAoC;wBACpC,oCAAoC;wBACpC,kCAAkC;wBAClC,yCAAyC;wBACzC,oCAAoC;wBACpC,kBAAkB;wBAClB,iBAAiB;wBACjB,mBAAmB;wBACnB,gBAAgB;wBAChB,wCAAwC;wBACxC,kBAAkB;wBAClB,oBAAoB;wBACpB,mCAAmC;qBACtC;iBACJ;;IAQD,kCAAC;CAxCD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}
